Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:08'!province: aProvince 	province := aProvince	! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'comparing' stamp: 'DaroReyes 6/20/2018 12:53'!= anObject	"Generated by RBGenerateEqualHashRefactoring"	self == anObject		ifTrue: [ ^ true ].	self class = anObject class		ifFalse: [ ^ false ].	^ streetName = anObject streetName		and: [ streetNumber = anObject streetNumber				and: [ town = anObject town						and: [ zipCode = anObject zipCode and: [ province = anObject province ] ] ] ]! !!Address methodsFor: 'comparing' stamp: 'DaroReyes 6/20/2018 12:54'!hash	"Generated by RBGenerateEqualHashRefactoring"	^ streetName hash		bitXor:			(streetNumber hash				bitXor: (town hash bitXor: (zipCode hash bitXor: province hash)))! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:07'!town: aTown 	town := aTown! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !!Address methodsFor: 'initialization' stamp: 'DaroReyes 6/20/2018 01:15'!initializeOnStreet: aStreetName atNumber: aStreetNumber in: aTown withZipcode: aZipCode in: aProvince	streetName := aStreetName.	streetNumber := aStreetNumber.	town := aTown.	zipCode := aZipCode.	province := aProvince.! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetNumber: aStreetNumber 	streetNumber := aStreetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetName: aStreetName 	streetName := aStreetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:08'!zipCode: aZipCode 	zipCode := aZipCode! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Address class	instanceVariableNames: ''!!Address class methodsFor: 'as yet unclassified' stamp: 'DaroReyes 6/20/2018 01:18'!onStreet: aStreetName atNumber: aStreetNumber in: aTown withZipcode: aZipCode in: aProvince	^self new initializeOnStreet: aStreetName atNumber: aStreetNumber in: aTown withZipcode: aZipCode in: aProvince! !Object subclass: #Customer	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Customer methodsFor: 'comparing' stamp: 'DaroReyes 6/20/2018 12:54'!= anObject	"Generated by RBGenerateEqualHashRefactoring"	self == anObject		ifTrue: [ ^ true ].	self class = anObject class		ifFalse: [ ^ false ].	^ firstName = anObject firstName		and: [ lastName = anObject lastName				and: [ identificationType = anObject identificationType						and: [ identificationNumber = anObject identificationNumber								and: [ addresses = anObject addresses ] ] ] ]! !!Customer methodsFor: 'comparing' stamp: 'DaroReyes 6/20/2018 12:54'!hash	"Generated by RBGenerateEqualHashRefactoring"	^ firstName hash		bitXor:			(lastName hash				bitXor:					(identificationType hash						bitXor: (identificationNumber hash bitXor: addresses hash)))! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationType		^identificationType ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationNumber		^identificationNumber ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:27'!addAddress: anAddress 	addresses add: anAddress ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:25'!addresses	^ addresses! !!Customer methodsFor: 'initialization' stamp: 'HernanWilkinson 10/28/2016 13:26'!initialize	super initialize.	addresses := OrderedCollection new.! !!Customer methodsFor: 'initialization' stamp: 'DaroReyes 6/20/2018 01:02'!initializeWithFirstName: aFirstName andLastName: aLastName identifiedBy: anIdentificationNumber ofType: anIdentificationType registering: someAddresses	super initialize.	firstName := aFirstName. 	lastName := aLastName.	identificationNumber := anIdentificationNumber.	identificationType := anIdentificationType.	addresses := someAddresses.! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!lastName: aLastName 	lastName := aLastName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!firstName: aName 	firstName := aName! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Customer class	instanceVariableNames: 'test'!!Customer class methodsFor: 'importing' stamp: 'Anonymous 6/20/2018 21:34'!importCustomers	"	self importCustomers	"	| anObject |	anObject := FileStream fileNamed: 'input.txt'.	test importCustomers! !!Customer class methodsFor: 'importing' stamp: 'DaroReyes 6/20/2018 01:18'!withFirstName: aFirstName andLastName: aLastName identifiedBy: anIdentificationNumber ofType: anIdentificationType registering: someAddresses	^self new initializeWithFirstName: aFirstName andLastName: aLastName identifiedBy: anIdentificationNumber ofType: anIdentificationType registering: someAddresses! !Object subclass: #CustomerImporter	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImporter methodsFor: 'importing' stamp: 'Anonymous 6/20/2018 21:51'!importCustomersFrom: inputStream to: aDataBaseSession	| newCustomer line |	line := inputStream nextLine.	[ line notNil ]		whileTrue: [ (line beginsWith: 'C')				ifTrue: [ | customerData |					customerData := line substrings: {$,}.					newCustomer := Customer new.					newCustomer firstName: customerData second.					newCustomer lastName: customerData third.					newCustomer identificationType: customerData fourth.					newCustomer identificationNumber: customerData fifth.					aDataBaseSession persist: newCustomer ].			(line beginsWith: 'A')				ifTrue: [ | addressData newAddress |					addressData := line substrings: {$,}.					newAddress := Address new.					newAddress streetName: addressData second.					newAddress streetNumber: addressData third asInteger.					newAddress town: addressData fourth.					newAddress zipCode: addressData fifth asInteger.					newAddress province: addressData sixth.					newCustomer addAddress: newAddress ].			line := inputStream nextLine ].! !TestCase subclass: #CustomerImporterTests	instanceVariableNames: 'session customerImporter'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImporterTests methodsFor: 'running' stamp: 'Anonymous 6/20/2018 21:50'!setUp	customerImporter := CustomerImporter new.	session := DataBaseSession		for:			(Array				with:					(ClassMapping						withDefaultTableNameFor: Address						mappingAll:							(Array								with: (EmbededMapping withDefaultFieldNameFor: #streetName)								with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)								with: (EmbededMapping withDefaultFieldNameFor: #town)								with: (EmbededMapping withDefaultFieldNameFor: #zipCode)								with: (EmbededMapping withDefaultFieldNameFor: #province)))				with:					(ClassMapping						withDefaultTableNameFor: Customer						mappingAll:							(Array								with: (EmbededMapping withDefaultFieldNameFor: #firstName)								with: (EmbededMapping withDefaultFieldNameFor: #lastName)								with: (EmbededMapping withDefaultFieldNameFor: #identificationType)								with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)								with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address)))).	session open.	session beginTransaction! !!CustomerImporterTests methodsFor: 'running' stamp: 'DaroReyes 6/19/2018 20:13'!tearDown	session commit.	session close! !!CustomerImporterTests methodsFor: 'tests' stamp: 'Anonymous 6/20/2018 21:30'!sampleStreamInput	| data |		data := 'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'.	^ReadStream on: data.! !!CustomerImporterTests methodsFor: 'tests' stamp: 'Anonymous 6/20/2018 21:52'!testImportCustomerPersistsAddressesAndCustomersCorrectly	| pepe sanMartinAddress maipuAddress alemAddress juanPerez |	customerImporter importCustomersFrom: self sampleStreamInput to: session.		sanMartinAddress := Address		onStreet: 'San Martin'		atNumber: 3322		in: 'Olivos'		withZipcode: 1636		in: 'BsAs'.	maipuAddress := Address		onStreet: 'Maipu'		atNumber: 888		in: 'Florida'		withZipcode: 1122		in: 'Buenos Aires'.	alemAddress := Address		onStreet: 'Alem'		atNumber: 1122		in: 'CABA'		withZipcode: 1001		in: 'CABA'.	pepe := Customer		withFirstName: 'Pepe'		andLastName: 'Sanchez'		identifiedBy: '22333444'		ofType: 'D'		registering: (Set with: sanMartinAddress with: maipuAddress).	juanPerez := Customer		withFirstName: 'Juan'		andLastName: 'Perez'		identifiedBy: '23-25666777-9'		ofType: 'C'		registering: (Set with: alemAddress).	self		assertsElementsPersistedIn: session		ofType: Address		areExactly: (Set with: sanMartinAddress with: maipuAddress with: alemAddress).	self		assertsElementsPersistedIn: session		ofType: Customer		areExactly: (Set with: pepe with: juanPerez)! !!CustomerImporterTests methodsFor: 'asserting' stamp: 'DaroReyes 6/20/2018 11:43'!assert: aSession persistsOnce: anObject ofType: aClass	self assert: (aSession select: [ :aPersistedObject | anObject = aPersistedObject ] ofType: aClass) size equals: 1.! !!CustomerImporterTests methodsFor: 'asserting' stamp: 'DaroReyes 6/20/2018 12:22'!assertsElementsPersistedIn: aSession ofType: aClass areExactly: aCollectionOfObjects	self assert: (aSession selectAllOfType: aClass) size equals: aCollectionOfObjects size.		aCollectionOfObjects do: [ :anObject | 		self assert: aSession persistsOnce: anObject ofType: aClass.	].! !