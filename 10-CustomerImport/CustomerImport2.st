Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:08'!province: aProvince 	province := aProvince	! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetNumber: aStreetNumber 	streetNumber := aStreetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetName: aStreetName 	streetName := aStreetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !!Address methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/1/2016 10:06'!isAt: aStreetName	^streetName = aStreetName ! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:08'!zipCode: aZipCode 	zipCode := aZipCode! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:07'!town: aTown 	town := aTown! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !Object subclass: #Customer	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!lastName: aLastName 	lastName := aLastName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!firstName: aName 	firstName := aName! !!Customer methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/1/2016 10:05'!addressAt: aStreetName ifNone: noneClosure 		^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 11/1/2016 09:43'!numberOfAddresses		^addresses size! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:27'!addAddress: anAddress 	addresses add: anAddress ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:25'!addresses	^ addresses! !!Customer methodsFor: 'initialization' stamp: 'HernanWilkinson 10/28/2016 13:26'!initialize	super initialize.	addresses := OrderedCollection new.! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationType		^identificationType ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationNumber		^identificationNumber ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !TestCase subclass: #CustomerImportTest	instanceVariableNames: 'session importer'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImportTest methodsFor: 'importing' stamp: 'Anonymous 6/21/2018 20:09'!importCustomersFrom: inputStream on: aSession	(CustomerImporter from: inputStream to: aSession) value! !!CustomerImportTest methodsFor: 'importing' stamp: 'HernanWilkinson 11/1/2016 15:17'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber		|customers |		customers := session 		select: [ :aCustomer | aCustomer identificationType = anIdentifycationType and: [ aCustomer identificationNumber = anIdentificationNumber ] ]		ofType: Customer.			self assert: customers size equals: 1.		^customers anyOne.! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 15:14'!assertJuanPerezWasImportedCorrectly		| customer idType idNumber |		idType := 'C'.	idNumber := '23-25666777-9'.	customer := self customerIdentifiedAs: idType numbered: idNumber.		self assert: customer isNamed: 'Juan' lastName: 'Perez' identfiedAs: idType withNumber: idNumber andNumberOfAddresses: 1.	self assert: customer hasAddressAt: 'Alem' number: 1122 in: 'CABA' zipCode: 1001 province: 'CABA'.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 15:13'!assertImportedCustomersSizeIsCorrect		self assert: (session selectAllOfType: Customer) size equals: 2.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 11:00'!assert: customer hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := customer addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'Anonymous 6/25/2018 13:19'!importingCustomersFrom: invalidTestData shouldRaiseErrorSaying: errorMessage	self		should: [ self importCustomersFrom: invalidTestData on: session ]		raise: Error - MessageNotUnderstood		withExceptionDo:			[ :anError | self assert: anError messageText equals: errorMessage ]! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 15:16'!assertPepeSanchezWasImportedCorrectly	| customer idType idNumber |	idType := 'D'.	idNumber := '22333444'.	customer := self customerIdentifiedAs: idType numbered: idNumber.		self assert: customer isNamed: 'Pepe' lastName: 'Sanchez' identfiedAs: idType withNumber: idNumber andNumberOfAddresses: 2.	self assert: customer hasAddressAt: 'San Martin' number: 3322 in: 'Olivos' zipCode: 1636 province: 'BsAs'.	self assert: customer hasAddressAt: 'Maipu' number: 888 in: 'Florida' zipCode: 1122 province: 'Buenos Aires'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 10:56'!assert: customer isNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize .! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/1/2016 15:24'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/1/2016 15:24'!setUp	session := DataBaseSession for: (Array with: self addressMapping with: self customerMapping).	session open.	session beginTransaction! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/1/2016 15:23'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/1/2016 15:23'!tearDown	session commit.	session close! !!CustomerImportTest methodsFor: 'testing' stamp: 'Anonymous 6/25/2018 17:19'!test05CanNotImportAddressRecordWithWrongNumberOfEntries	| invalidTestData |		invalidTestData := ReadStream on:'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAs,Ajiods,2309'.	self		importingCustomersFrom: invalidTestData		shouldRaiseErrorSaying: (CustomerImporter recordEntriesNumberIsIncorrectErrorMessageFor: CustomerImporter addressRecordName).	! !!CustomerImportTest methodsFor: 'testing' stamp: 'Anonymous 6/25/2018 17:21'!test07CanNotImportAddressWithNonNumericStreetNumber	| invalidTestData |		invalidTestData := ReadStream on:'C,Pepe,Sanchez,D,22333444A,San Martin,NONUMERO,Olivos,1636,BsAs'.	self		importingCustomersFrom: invalidTestData		shouldRaiseErrorSaying: (CustomerImporter numericRecordEntryIsNotANumberErrorMessageFor: CustomerImporter streetNumberEntryName).				! !!CustomerImportTest methodsFor: 'testing' stamp: 'Anonymous 6/25/2018 17:21'!test08CanNotImportAddressWithNonNumericZipcode	| invalidTestData |		invalidTestData := ReadStream on:'C,Pepe,Sanchez,D,22333444A,San Martin,9034,Olivos,NONUMBER,BsAs'.	self		importingCustomersFrom: invalidTestData		shouldRaiseErrorSaying: (CustomerImporter numericRecordEntryIsNotANumberErrorMessageFor: CustomerImporter zipCodeEntryName).		! !!CustomerImportTest methodsFor: 'testing' stamp: 'Anonymous 6/25/2018 17:13'!test04CanNotImportCustomerRecordWithIncorrectNumberOfEntries	| invalidTestData |		invalidTestData := ReadStream on:'C,Pepe,Sanchez'.	self		importingCustomersFrom: invalidTestData		shouldRaiseErrorSaying: (CustomerImporter recordEntriesNumberIsIncorrectErrorMessageFor: CustomerImporter customerRecordName).	! !!CustomerImportTest methodsFor: 'testing' stamp: 'Anonymous 6/25/2018 13:21'!test03CanNotImportRecordOfUnknownType	| invalidTestData |		invalidTestData := ReadStream on:'Cornamenta,Pepe,Sanchez,D,22333444'.	self		importingCustomersFrom: invalidTestData		shouldRaiseErrorSaying: CustomerImporter unknownRecordTypeErrorMessage.	! !!CustomerImportTest methodsFor: 'testing' stamp: 'DaroReyes 6/24/2018 13:14'!test01CustomersWithAddressesAreImportedCorrectly	self importCustomersFrom: self validTestData on: session.	self assertImportedCustomersSizeIsCorrect.	self assertPepeSanchezWasImportedCorrectly.	self assertJuanPerezWasImportedCorrectly! !!CustomerImportTest methodsFor: 'testing' stamp: 'Anonymous 6/25/2018 13:20'!test02CanNotImportEmptyRecord	| invalidTestData  |		invalidTestData := ReadStream on:''.	self		importingCustomersFrom: invalidTestData		shouldRaiseErrorSaying: CustomerImporter emptyRecordErrorMessage.! !!CustomerImportTest methodsFor: 'testing' stamp: 'Anonymous 6/25/2018 13:21'!test06CanNotImportAddressBelongingToNoCustomer	| invalidTestData |		invalidTestData := ReadStream on:'A,San Martin,3322,Olivos,1636,BsAs'.	self		importingCustomersFrom: invalidTestData		shouldRaiseErrorSaying: CustomerImporter addressBelongsToNoOneErrorMessage.	! !!CustomerImportTest methodsFor: 'test data' stamp: 'HernanWilkinson 11/1/2016 15:17'!validTestData	^ ReadStream on:'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !Object subclass: #CustomerImporter	instanceVariableNames: 'inputStream session newCustomer recordEntries recordImporters newCustomerExists nextLine'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImporter methodsFor: 'importing' stamp: 'Anonymous 6/25/2018 17:52'!value	self forEachRecordDo:		[ self importRecord ].! !!CustomerImporter methodsFor: 'importing - private' stamp: 'Anonymous 6/25/2018 17:54'!getNextRecord	nextLine := inputStream nextLine! !!CustomerImporter methodsFor: 'importing - private' stamp: 'Anonymous 6/25/2018 17:54'!getRecordEntries	^ recordEntries := nextLine substrings: {$,}! !!CustomerImporter methodsFor: 'importing - private' stamp: 'Anonymous 6/25/2018 16:51'!importRecord	| recordType recordImporter |		self getRecordEntries.		recordType := recordEntries at: 1		ifAbsent: [ self error: self class emptyRecordErrorMessage ].			recordImporter := recordImporters at: recordType		ifAbsent: [ self error: self class unknownRecordTypeErrorMessage ].			recordImporter value.! !!CustomerImporter methodsFor: 'importing - private' stamp: 'Anonymous 6/25/2018 17:54'!forEachRecordDo: aClosure	self getNextRecord.	[ nextLine notNil ]		whileTrue: [ aClosure value.			self getNextRecord ]! !!CustomerImporter methodsFor: 'importing - private' stamp: 'Anonymous 6/25/2018 17:46'!importAddress	| newAddress |		self assertRecord: (self class addressRecordName) isSized: 6.	self assertCustomerForAddressExists.				newAddress := Address new.	newAddress streetName: recordEntries second.	newAddress streetNumber: 		(self 			asInteger: (recordEntries third) 			named: self class streetNumberEntryName).	newAddress town: recordEntries fourth.	newAddress zipCode: 		(self 			asInteger: (recordEntries fifth) 			named: self class zipCodeEntryName).	newAddress province: recordEntries sixth.		newCustomer addAddress: newAddress! !!CustomerImporter methodsFor: 'importing - private' stamp: 'Anonymous 6/25/2018 17:46'!asInteger: recordEntry named: anEntryName	self assertIsANumber: recordEntry raisingErrorWithEntryName: anEntryName.	^ recordEntry asInteger! !!CustomerImporter methodsFor: 'importing - private' stamp: 'Anonymous 6/25/2018 17:49'!importCustomer	self assertRecord: (self class customerRecordName) isSized:5.		newCustomerExists := true.	newCustomer := Customer new.	newCustomer firstName: recordEntries second.	newCustomer lastName: recordEntries third.	newCustomer identificationType: recordEntries fourth.	newCustomer identificationNumber: recordEntries fifth.		session persist: newCustomer! !!CustomerImporter methodsFor: 'initialization' stamp: 'Anonymous 6/25/2018 17:48'!initializeWith: anInputStream with: aDataBaseSession 	inputStream := anInputStream.	session := aDataBaseSession.	newCustomerExists := false.	recordImporters := Dictionary new		add: 'C' -> [ self importCustomer ];		add: 'A' -> [ self importAddress ];		yourself.! !!CustomerImporter methodsFor: 'assertions' stamp: 'Anonymous 6/25/2018 17:49'!assertCustomerForAddressExists	newCustomerExists		ifFalse: [ self error: self class addressBelongsToNoOneErrorMessage ].! !!CustomerImporter methodsFor: 'assertions' stamp: 'Anonymous 6/25/2018 17:46'!assertIsANumber: recordEntry raisingErrorWithEntryName: anEntryName 	recordEntry isAllDigits		ifFalse: [ self error: (self class numericRecordEntryIsNotANumberErrorMessageFor: anEntryName) ].! !!CustomerImporter methodsFor: 'assertions' stamp: 'Anonymous 6/25/2018 17:50'!assertRecord: aRecordName isSized: aSize	(recordEntries size = aSize)		ifFalse: [ self error: (self class recordEntriesNumberIsIncorrectErrorMessageFor: aRecordName)].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CustomerImporter class	instanceVariableNames: ''!!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/25/2018 17:36'!zipCodeEntryName	^'Zip code'! !!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/25/2018 17:36'!streetNumberEntryName	^'Street number'! !!CustomerImporter class methodsFor: 'instance creation' stamp: 'Anonymous 6/25/2018 17:19'!addressRecordName	^'Address'! !!CustomerImporter class methodsFor: 'instance creation' stamp: 'Anonymous 6/25/2018 17:15'!recordEntriesNumberIsIncorrectErrorMessageFor: aRecordName	^aRecordName,' record has an incorrect number of entries'! !!CustomerImporter class methodsFor: 'instance creation' stamp: 'Anonymous 6/21/2018 20:04'!from: anInputStream to: aSession	^self new initializeWith: anInputStream with: aSession! !!CustomerImporter class methodsFor: 'instance creation' stamp: 'Anonymous 6/25/2018 17:18'!customerRecordName	^'Customer'! !!CustomerImporter class methodsFor: 'error messages' stamp: 'DaroReyes 6/24/2018 13:33'!emptyEntryRecordErrorMessage		^ 'Record entry should not be empty'.! !!CustomerImporter class methodsFor: 'error messages' stamp: 'DaroReyes 6/24/2018 12:48'!unknownRecordTypeErrorMessage		^ 'Unknown record type'! !!CustomerImporter class methodsFor: 'error messages' stamp: 'Anonymous 6/25/2018 17:23'!numericRecordEntryIsNotANumberErrorMessageFor: anEntryName	^ anEntryName, ' entry should contain a number'! !!CustomerImporter class methodsFor: 'error messages' stamp: 'DaroReyes 6/24/2018 12:47'!emptyRecordErrorMessage	^ 'Record should not be empty'! !!CustomerImporter class methodsFor: 'error messages' stamp: 'DaroReyes 6/24/2018 13:19'!addressBelongsToNoOneErrorMessage	^ 'A customer should be imported before any addresses do'! !