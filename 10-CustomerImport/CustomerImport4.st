Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:07'!town: aTown 	town := aTown! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:08'!province: aProvince 	province := aProvince	! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetNumber: aStreetNumber 	streetNumber := aStreetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetName: aStreetName 	streetName := aStreetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:08'!zipCode: aZipCode 	zipCode := aZipCode! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !!Address methodsFor: 'testing' stamp: 'HernanWilkinson 11/1/2016 10:06'!isAt: aStreetName	^streetName = aStreetName ! !Object subclass: #CSVImporter	instanceVariableNames: 'line readStream record system'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CSVImporter methodsFor: 'importing' stamp: 'Dar 7/1/2018 21:00'!import	[ self canImportNextLine ] whileTrue: [ 		self convertLineToRecord.		self importRecord ]! !!CSVImporter methodsFor: 'error signal' stamp: 'NicolasPazos 7/2/2018 12:00'!signalInvalidRecordType	self error: self class invalidRecordTypeErrorDescription! !!CSVImporter methodsFor: 'importing - private' stamp: 'Dar 7/1/2018 21:01'!canImportNextLine	line := readStream nextLine.	^ line notNil! !!CSVImporter methodsFor: 'importing - private' stamp: 'Dar 7/1/2018 21:01'!assertRecordNotEmpty		record isEmpty ifTrue: [ self signalInvalidRecordType ]! !!CSVImporter methodsFor: 'importing - private' stamp: 'Dar 7/1/2018 21:01'!convertLineToRecord	record := line substrings: {$,}.		self assertRecordNotEmpty! !!CSVImporter methodsFor: 'importing - private' stamp: 'NicolasPazos 7/2/2018 11:57'!importRecord	self subclassResponsibility ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CSVImporter class	instanceVariableNames: ''!!CSVImporter class methodsFor: 'error descriptions' stamp: 'NicolasPazos 7/2/2018 11:59'!invalidRecordTypeErrorDescription		^'Invalid record type'! !TestCase subclass: #CustomerImportTest	instanceVariableNames: 'importer system'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/1/2016 15:59'!addressWithoutCustomerTestData		^ ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordWithLessThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordStartingWithMoreThanOneATestData		^ ReadStream on: self alwaysImportedCustomerRecord,'AA,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordWithMoreThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs,y otra cosa'! !!CustomerImportTest methodsFor: 'testing' stamp: 'Dar 7/2/2018 02:00'!testCanNotImportCustomerRecordWithLessThanFiveFields	self		should: [ self				importCustomersFrom: self customerRecordWithLessThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidCustomerRecordErrorDescription.			self assert: system customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'Dar 7/2/2018 01:59'!testCanNotImportAddressWithoutCustomer	self		should: [ self importCustomersFrom: self addressWithoutCustomerTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter addressWithoutCustomerErrorDescription.			self assert: system customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'Dar 7/2/2018 02:00'!testCanNotImportCustomerRecordWithMoreThanFiveFields	self		should: [ self				importCustomersFrom: self customerRecordWithMoreThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidCustomerRecordErrorDescription.			self assert: system customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 10:42'!testCanNotImportAddressRecordWithMoreThanSixFields	self 		should: [ self importCustomersFrom: self addressRecordWithMoreThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/1/2016 15:56'!testImportCustomers	self importCustomersFrom: self validTestData.	self assertImportedCustomersSizeIsCorrect.	self assertPepeSanchezWasImportedCorrectly.	self assertJuanPerezWasImportedCorrectly! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 10:42'!testShouldNotImportAddressRecordsStartingWithMoreThanA	self 		should: [ self importCustomersFrom: self addressRecordStartingWithMoreThanOneATestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'Dar 7/2/2018 02:01'!testShouldNotImportCustomerRecordsStartingWithMoreThanC	self		should: [ self				importCustomersFrom: self customerRecordStartingWithMoreThanOneCTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: system customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 10:41'!testCanNotImportAddressRecordWithLessThanSixFields		self		should: [ self importCustomersFrom: self addressRecordWithLessThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 15:52'!testEmptyLinesAreRecognizedAsInvalidRecords		self		should: [ self importCustomersFrom: self dataWithEmptyLine ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:47'!alwaysImportedCustomerRecord	^ 'C,Pepe,Sanchez,', self alwaysImportedCustomerIdType, ',', self alwaysImportedCustomerIdNumber ! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:53'!customerRecordWithMoreThanFiveFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,',x'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:47'!alwaysImportedCustomerIdNumber	^ '22333444'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'Dar 7/2/2018 01:58'!alwaysImportedCustomer	| anIdentificationNumber anIdentifycationType |	anIdentifycationType := self alwaysImportedCustomerIdType.	anIdentificationNumber := self alwaysImportedCustomerIdNumber.	^ system		customerIdentifiedAs: anIdentifycationType		numbered: anIdentificationNumber		ifNone: [  ]! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/1/2016 17:48'!customerRecordStartingWithMoreThanOneCTestData		^ ReadStream on:'CC,Pepe,Sanchez,D,22333444'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:50'!customerRecordWithLessThanFiveFieldsTestData		^ ReadStream on: 'C,Pepe,Sanchez,D'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:46'!alwaysImportedCustomerIdType	^ 'D'! !!CustomerImportTest methodsFor: 'test data' stamp: 'HernanWilkinson 11/2/2016 15:52'!dataWithEmptyLine		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data' stamp: 'HernanWilkinson 11/2/2016 10:46'!validTestData	^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'importing' stamp: 'HernanWilkinson 11/4/2016 09:27'!importCustomersFrom: inputStream	(CustomerImporter from: inputStream using: system) import! !!CustomerImportTest methodsFor: 'asserting' stamp: 'Dar 7/2/2018 02:01'!assertJuanPerezWasImportedCorrectly	| customer idType idNumber |	idType := 'C'.	idNumber := '23-25666777-9'.	customer := system		customerIdentifiedAs: idType		numbered: idNumber		ifNone: [  ].	self		assert: customer		isNamed: 'Juan'		lastName: 'Perez'		identfiedAs: idType		withNumber: idNumber		andNumberOfAddresses: 1.	self		assert: customer		hasAddressAt: 'Alem'		number: 1122		in: 'CABA'		zipCode: 1001		province: 'CABA'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'Dar 7/2/2018 02:01'!assertImportedCustomersSizeIsCorrect	self assert: system allCustomers size equals: 2! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 11:00'!assert: customer hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := customer addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 10:56'!assert: customer isNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize .! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/3/2016 09:20'!assertPepeSanchezWasImportedCorrectly	| customer |	customer := self alwaysImportedCustomer. 		self assert: customer isNamed: 'Pepe' lastName: 'Sanchez' identfiedAs: self alwaysImportedCustomerIdType withNumber: self alwaysImportedCustomerIdNumber andNumberOfAddresses: 2.	self assert: customer hasAddressAt: 'San Martin' number: 3322 in: 'Olivos' zipCode: 1636 province: 'BsAs'.	self assert: customer hasAddressAt: 'Maipu' number: 888 in: 'Florida' zipCode: 1122 province: 'Buenos Aires'! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'Dar 7/2/2018 01:57'!setUp	system := Environment current createERPSystem.	system start.	system beginTransaction! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/4/2016 09:52'!tearDown	system commit.	system shutdown! !CSVImporter subclass: #CustomerImporter	instanceVariableNames: 'newCustomer addressRecordReader customerRecordReader'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/1/2016 17:52'!importRecord		self isCustomerRecord ifTrue: [ ^self importCustomer ].	self isAddressRecord ifTrue: [ ^self importAddress ].		self signalInvalidRecordType! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'Dar 7/1/2018 23:58'!importAddress	| address |	self assertThereIsCustsomerForAddress.		address := addressRecordReader read: record.		^ newCustomer addAddress: address! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:56'!assertThereIsCustsomerForAddress	newCustomer isNil ifTrue: [ self signalAddressWithoutCustomerError ].	! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:55'!isAddressRecord	^ record first = 'A'! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/1/2016 16:01'!signalAddressWithoutCustomerError	self error: self class addressWithoutCustomerErrorDescription.! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'HernanWilkinson 11/2/2016 10:55'!isCustomerRecord	^ record first = 'C'! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'Dar 7/2/2018 01:58'!importCustomer	newCustomer := customerRecordReader read: record.		system addCustomer: newCustomer! !!CustomerImporter methodsFor: 'initialization' stamp: 'NicolasPazos 7/2/2018 12:17'!initializeOn: aReadStream using: anERPSystem	readStream := aReadStream.	system := anERPSystem.		addressRecordReader := AddressRecordReader new.	customerRecordReader := CustomerRecordReader new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CustomerImporter class	instanceVariableNames: ''!!CustomerImporter class methodsFor: 'instance creation' stamp: 'HernanWilkinson 11/4/2016 09:27'!from: aReadStream using: aCustomerSystem	^ self new initializeOn: aReadStream using: aCustomerSystem! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/2/2016 10:51'!invalidCustomerRecordErrorDescription		^'Invalid customer record'! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/1/2016 18:00'!invalidAddressRecordErrorDescription		^'Invalid address record'! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/1/2016 16:02'!addressWithoutCustomerErrorDescription		^'There is no Customer for the imported address'! !TestCase subclass: #ERPSystemTest	instanceVariableNames: 'system'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!ERPSystemTest methodsFor: 'tests - data' stamp: 'NicolasPazos 7/2/2018 14:34'!defaultCustomer	| unexistantCustomer |	unexistantCustomer := Customer new.	unexistantCustomer firstName: 'Galindo'.	unexistantCustomer lastName: 'Monica'.	unexistantCustomer identificationType: 'C'.	unexistantCustomer identificationNumber: '23-25666777-9'.	^ unexistantCustomer! !!ERPSystemTest methodsFor: 'tests - data' stamp: 'NicolasPazos 7/2/2018 14:30'!defaultSupplierWithDefaultCustomer	| newSupplier |	newSupplier := Supplier new.	newSupplier name: 'TremeeendoSupplier'.	newSupplier identificationType: 'D'.	newSupplier identificationNumber: '42'.	newSupplier addCustomer: self defaultCustomer.	^ newSupplier! !!ERPSystemTest methodsFor: 'tests - data' stamp: 'NicolasPazos 7/2/2018 14:31'!getDefaultSupplier	| aSupplier |	aSupplier := system		supplierIdentifiedAs: 'D'		numbered: '42'		ifNone: [ self fail ].	^ aSupplier! !!ERPSystemTest methodsFor: 'setup-teardown' stamp: 'asdasd 7/2/2018 03:43'!setUp	system := Environment current createERPSystem.	system start.	system beginTransaction.! !!ERPSystemTest methodsFor: 'setup-teardown' stamp: 'asdasd 7/2/2018 03:43'!tearDown	system commit.	system shutdown.! !!ERPSystemTest methodsFor: 'tests' stamp: 'NicolasPazos 7/2/2018 14:33'!test03CustomersCanBeAddedToERPSystem	| aSystemCustomer |	system addCustomer: self defaultCustomer.	aSystemCustomer := system		customerIdentifiedAs: self defaultCustomer identificationType		numbered: self defaultCustomer identificationNumber		ifNone: [ self fail ].			self assertIsDefaultCustomer: aSystemCustomer! !!ERPSystemTest methodsFor: 'tests' stamp: 'NicolasPazos 7/2/2018 14:32'!test02CanAddSupplierWithExistentCustomers	| aSupplier |	system addCustomer: self defaultCustomer.	system addSupplier: self defaultSupplierWithDefaultCustomer.		aSupplier := self getDefaultSupplier.	self assert: system allSuppliers size equals: 1.	self assertIsDefaultSupplier: aSupplier! !!ERPSystemTest methodsFor: 'tests' stamp: 'NicolasPazos 7/2/2018 14:31'!test01CanNotAddSupplierWithUnexistentCustomers	self		should: [ system addSupplier: self defaultSupplierWithDefaultCustomer ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: ERPSystem supplierHasCustomerNotInSystemErrorMessage ]! !!ERPSystemTest methodsFor: 'assertions' stamp: 'NicolasPazos 7/2/2018 14:32'!assertIsDefaultSupplier: aSupplier	self		assert: aSupplier		isNamed: 'TremeeendoSupplier'		identifiedAs: 'D'		withNumber: '42'		withNumberOfCustomers: 1		andNumberOfAddresses: 0! !!ERPSystemTest methodsFor: 'assertions' stamp: 'NicolasPazos 7/2/2018 13:31'!assert: aSupplier isNamed: aName identifiedAs: anIDType withNumber: anIDNumber withNumberOfCustomers: aNumberOfCustomers andNumberOfAddresses: aNumberOfAddresses	self assert: aSupplier name equals: aName.	self assert: aSupplier identificationType equals: anIDType.	self assert: aSupplier identificationNumber equals: anIDNumber.	self assert: aSupplier numberOfAddresses equals: aNumberOfAddresses.	self assert: aSupplier numberOfCustomers  equals: aNumberOfCustomers .! !!ERPSystemTest methodsFor: 'assertions' stamp: 'NicolasPazos 7/2/2018 14:33'!assertIsDefaultCustomer: aSystemCustomer	self		assert: aSystemCustomer firstName		equals: self defaultCustomer firstName.	self		assert: aSystemCustomer lastName		equals: self defaultCustomer lastName.	self		assert: aSystemCustomer identificationType		equals: self defaultCustomer identificationType.	self		assert: aSystemCustomer identificationNumber		equals: self defaultCustomer identificationNumber.	self		assert: aSystemCustomer numberOfAddresses		equals: self defaultCustomer numberOfAddresses! !Object subclass: #Environment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Environment methodsFor: 'system creation' stamp: 'DarioReyes 7/1/2018 13:40'!createERPSystem	self subclassResponsibility ! !!Environment methodsFor: 'system creation' stamp: 'HernanWilkinson 11/4/2016 09:49'!createCustomerSystem	self subclassResponsibility ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Environment class	instanceVariableNames: ''!!Environment class methodsFor: 'enviroment selection' stamp: 'HernanWilkinson 11/4/2016 09:46'!current		^self allSubclasses 		detect: [ :anEnvironemntClass | anEnvironemntClass isCurrent ]		ifFound: [ :anEnvironmentClass | anEnvironmentClass new ]		ifNone: [ self error: 'No environment detected' ]! !!Environment class methodsFor: 'enviroment selection' stamp: 'HernanWilkinson 11/4/2016 09:49'!isCurrent	self subclassResponsibility ! !Environment subclass: #DevelpmentEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!DevelpmentEnvironment methodsFor: 'system creation' stamp: 'DarioReyes 7/1/2018 13:40'!createERPSystem		^TransientERPSystem new! !!DevelpmentEnvironment methodsFor: 'system creation' stamp: 'Dar 7/2/2018 01:05'!createCustomerSystem		^TransientPartySystem new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DevelpmentEnvironment class	instanceVariableNames: ''!!DevelpmentEnvironment class methodsFor: 'enviroment selection' stamp: 'HernanWilkinson 11/4/2016 09:47'!isCurrent		^IntegrationEnvironment isCurrent not! !Environment subclass: #IntegrationEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!IntegrationEnvironment methodsFor: 'system creation' stamp: 'NicolasPazos 7/2/2018 12:14'!createERPSystem		^PersistentERPSystem new! !!IntegrationEnvironment methodsFor: 'system creation' stamp: 'HernanWilkinson 11/4/2016 09:45'!createCustomerSystem		^PersistentCustomerSystem new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!IntegrationEnvironment class	instanceVariableNames: ''!!IntegrationEnvironment class methodsFor: 'enviroment selection' stamp: 'NicolasPazos 7/2/2018 15:05'!isCurrent		^false! !Object subclass: #Party	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Party methodsFor: 'addresses' stamp: 'asdasd 7/2/2018 03:45'!addressAt: aStreetName ifNone: noneClosure 		self subclassResponsibility.! !!Party methodsFor: 'addresses' stamp: 'asdasd 7/2/2018 03:45'!addAddress: anAddress		self subclassResponsibility.! !!Party methodsFor: 'addresses' stamp: 'asdasd 7/2/2018 03:45'!addresses		self subclassResponsibility.! !!Party methodsFor: 'addresses' stamp: 'asdasd 7/2/2018 03:45'!numberOfAddresses		self subclassResponsibility.! !!Party methodsFor: 'addresses' stamp: 'asdasd 7/2/2018 03:45'!addressesIsEmpty		self subclassResponsibility.! !!Party methodsFor: 'identification' stamp: 'asdasd 7/2/2018 03:45'!identificationNumber		self subclassResponsibility.! !!Party methodsFor: 'identification' stamp: 'asdasd 7/2/2018 03:45'!identificationType		self subclassResponsibility.! !!Party methodsFor: 'identification' stamp: 'asdasd 7/2/2018 03:45'!identificationNumber: anIdentificationNumber 	self subclassResponsibility.! !!Party methodsFor: 'identification' stamp: 'asdasd 7/2/2018 03:45'!isIdentifiedAs: anIDType numbered: anIDNumber 	self subclassResponsibility.! !!Party methodsFor: 'identification' stamp: 'asdasd 7/2/2018 03:45'!identificationType: anIdentificationType 	self subclassResponsibility.! !Party subclass: #Customer	instanceVariableNames: 'id identificationType identificationNumber addresses firstName lastName'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Customer methodsFor: 'initialization' stamp: 'HernanWilkinson 10/28/2016 13:26'!initialize	super initialize.	addresses := OrderedCollection new.! !!Customer methodsFor: 'addresses' stamp: 'Dar 7/2/2018 03:29'!addressAt: aStreetName ifNone: noneClosure 		^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !!Customer methodsFor: 'addresses' stamp: 'Dar 7/2/2018 03:29'!addAddress: anAddress 	addresses add: anAddress ! !!Customer methodsFor: 'addresses' stamp: 'Anonymous 7/2/2018 03:40'!addresses	^ addresses! !!Customer methodsFor: 'addresses' stamp: 'asdasd 7/2/2018 03:41'!identificationType		^identificationType ! !!Customer methodsFor: 'addresses' stamp: 'asdasd 7/2/2018 03:40'!numberOfAddresses		^addresses size! !!Customer methodsFor: 'addresses' stamp: 'asdasd 7/2/2018 03:41'!addressesIsEmpty		^addresses isEmpty! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!lastName: aLastName 	lastName := aLastName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!firstName: aName 	firstName := aName! !!Customer methodsFor: 'identification' stamp: 'asdasd 7/2/2018 03:40'!isIdentifiedAs: anIDType numbered: anIDNumber 	^ identificationNumber = anIDNumber and: [ identificationType = anIDType  ].! !!Customer methodsFor: 'identification' stamp: 'asdasd 7/2/2018 03:41'!identificationNumber		^identificationNumber ! !!Customer methodsFor: 'identification' stamp: 'asdasd 7/2/2018 03:41'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Customer methodsFor: 'identification' stamp: 'asdasd 7/2/2018 03:40'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !Object subclass: #RecordMapper	instanceVariableNames: 'session'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RecordMapper class	instanceVariableNames: ''!!RecordMapper class methodsFor: 'mapping' stamp: 'Dar 7/2/2018 01:15'!supplierMapping	^ ClassMapping		withDefaultTableNameFor: Supplier		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #name)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address)				with: (OneToManyMapping withDefaultFieldNameFor: #customers ofType: Customer))! !!RecordMapper class methodsFor: 'mapping' stamp: 'Dar 7/2/2018 01:18'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!RecordMapper class methodsFor: 'mapping' stamp: 'Dar 7/2/2018 01:15'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !Object subclass: #RecordReader	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!RecordReader methodsFor: 'assertions' stamp: 'Dar 7/2/2018 01:29'!assertValidRecordSize: record		record size ~= self recordSize ifTrue: [ self signalInvalidRecord ].! !!RecordReader methodsFor: 'signalling' stamp: 'Dar 7/2/2018 00:13'!signalInvalidRecord 		self error: self class invalidRecordErrorDescription ! !!RecordReader methodsFor: 'reading' stamp: 'Dar 7/2/2018 00:11'!read: record
	self subclassResponsibility! !!RecordReader methodsFor: 'configuration' stamp: 'Dar 7/2/2018 01:30'!recordSize		self subclassResponsibility.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RecordReader class	instanceVariableNames: ''!!RecordReader class methodsFor: 'error descriptions' stamp: 'Dar 7/2/2018 00:11'!invalidRecordErrorDescription
	self subclassResponsibility! !RecordReader subclass: #AddressRecordReader	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!AddressRecordReader methodsFor: 'configuration' stamp: 'Dar 7/2/2018 01:29'!recordSize		^6! !!AddressRecordReader methodsFor: 'reading' stamp: 'Dar 7/2/2018 00:09'!read: record	| newAddress |		self assertValidRecordSize: record.		newAddress := Address new.	newAddress streetName: record second.	newAddress streetNumber: record third asInteger.	newAddress town: record fourth.	newAddress zipCode: record fifth asInteger.	newAddress province: record sixth.		^ newAddress! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AddressRecordReader class	instanceVariableNames: ''!!AddressRecordReader class methodsFor: 'error descriptions' stamp: 'Dar 7/2/2018 00:09'!invalidRecordErrorDescription		^'Invalid address record'! !RecordReader subclass: #CustomerRecordReader	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerRecordReader methodsFor: 'reading' stamp: 'Dar 7/2/2018 00:07'!read: record	| customer |		self assertValidRecordSize: record.		customer := Customer new.	customer firstName: record second.	customer lastName: record third.	customer identificationType: record fourth.	customer identificationNumber: record fifth.		^ customer! !!CustomerRecordReader methodsFor: 'configuration' stamp: 'Dar 7/2/2018 01:29'!recordSize		^5! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CustomerRecordReader class	instanceVariableNames: ''!!CustomerRecordReader class methodsFor: 'error descriptions' stamp: 'Dar 7/2/2018 00:08'!invalidRecordErrorDescription		^'Invalid customer record'! !Party subclass: #Supplier	instanceVariableNames: 'id identificationType identificationNumber addresses name customers'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Supplier methodsFor: 'customers' stamp: 'Dar 7/2/2018 00:50'!customerIdentifiedAs: anIDType numbered: anIDNumber ifNone: anObject 	^ customers detect: [ :aCustomer | aCustomer isIdentifiedAs: anIDType numbered: anIDNumber ].! !!Supplier methodsFor: 'customers' stamp: 'NicolasPazos 7/2/2018 12:32'!numberOfCustomers		^customers size! !!Supplier methodsFor: 'customers' stamp: 'DarioReyes 6/30/2018 03:14'!addCustomer: aCustomer 	customers add: aCustomer! !!Supplier methodsFor: 'customers' stamp: 'Dar 7/2/2018 01:52'!customers	^ customers! !!Supplier methodsFor: 'name' stamp: 'DarioReyes 6/28/2018 20:25'!name	^ name! !!Supplier methodsFor: 'name' stamp: 'DarioReyes 6/28/2018 20:25'!name: anObject	name := anObject! !!Supplier methodsFor: 'initialization' stamp: 'DarioReyes 6/30/2018 03:15'!initialize	addresses := OrderedCollection new.	customers := OrderedCollection new.! !!Supplier methodsFor: 'identification' stamp: 'asdasd 7/2/2018 03:41'!identificationNumber		^identificationNumber ! !!Supplier methodsFor: 'identification' stamp: 'asdasd 7/2/2018 03:41'!identificationType		^identificationType ! !!Supplier methodsFor: 'identification' stamp: 'asdasd 7/2/2018 03:41'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Supplier methodsFor: 'identification' stamp: 'asdasd 7/2/2018 03:40'!isIdentifiedAs: anIDType numbered: anIDNumber 	^ identificationNumber = anIDNumber and: [ identificationType = anIDType  ].! !!Supplier methodsFor: 'identification' stamp: 'asdasd 7/2/2018 03:40'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !!Supplier methodsFor: 'addresses' stamp: 'Dar 7/2/2018 03:29'!addressAt: aStreetName ifNone: noneClosure 		^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !!Supplier methodsFor: 'addresses' stamp: 'Dar 7/2/2018 03:29'!addAddress: anAddress 	addresses add: anAddress ! !!Supplier methodsFor: 'addresses' stamp: 'asdasd 7/2/2018 03:40'!addresses	^ addresses! !!Supplier methodsFor: 'addresses' stamp: 'asdasd 7/2/2018 03:40'!numberOfAddresses		^addresses size! !!Supplier methodsFor: 'addresses' stamp: 'asdasd 7/2/2018 03:41'!addressesIsEmpty		^addresses isEmpty! !TestCase subclass: #SupplierImportTest	instanceVariableNames: 'importer system'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!SupplierImportTest methodsFor: 'test data - address' stamp: 'NicolasPazos 7/2/2018 13:55'!defaultAddressRecord	^ 'A,San Martin,3322,Olivos,1636,BsAs'! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'Dar 7/2/2018 03:23'!defaultSupplierRecord	^ 'S,',	self defaultSupplierName, ',',	self defaultSupplierIdentificationType, ',',	self defaultSupplierIdentificationNumber.! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'NicolasPazos 7/2/2018 12:48'!getSupplierIdentifiedAs: anIdType numbered: anIDNumber	| aVerduritasSupplier |	aVerduritasSupplier := system		supplierIdentifiedAs: anIdType		numbered: anIDNumber		ifNone: [ self fail ].	^ aVerduritasSupplier! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'NicolasPazos 7/2/2018 13:22'!verduritasSupplierName	^'Verduritas'! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'NicolasPazos 7/2/2018 13:23'!verduritasSupplierIdentificationNumber	^'123'! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'NicolasPazos 7/2/2018 13:25'!caribeñoSupplierIdentificationNumber	^'1234'! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'NicolasPazos 7/2/2018 13:23'!verduritasSupplierIdentificationType	^'C'! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'Dar 7/2/2018 03:21'!defaultSupplierName	^ 'Supplier1'! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'Dar 7/2/2018 03:22'!getDefaultSupplierFromSystem	^ system		supplierIdentifiedAs: self defaultSupplierIdentificationType		numbered: self defaultSupplierIdentificationNumber		ifNone: [ self fail.].! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'NicolasPazos 7/2/2018 13:25'!caribeñoSupplierRecord	^ 'S,',	self caribeñoSupplierName, ',',	self caribeñoSupplierIdentificationType, ',',	self caribeñoSupplierIdentificationNumber.! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'Dar 7/2/2018 03:21'!defaultSupplierIdentificationNumber	^ '123'! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'NicolasPazos 7/2/2018 13:25'!caribeñoSupplierIdentificationType	^'D'! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'NicolasPazos 7/2/2018 13:22'!verduritasSupplierRecord	^ 'S,',	self verduritasSupplierName, ',',	self verduritasSupplierIdentificationType, ',',	self verduritasSupplierIdentificationNumber.! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'Dar 7/2/2018 03:22'!defaultSupplierIdentificationType	^ 'D'! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'NicolasPazos 7/2/2018 13:25'!caribeñoSupplierName	^'Caribeño'! !!SupplierImportTest methodsFor: 'importing' stamp: 'Dar 7/2/2018 02:26'!importSuppliersFrom: inputStream	(SupplierImporter from: (ReadStream on: inputStream) using: system) import! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'Dar 7/2/2018 03:16'!defaultCustomer	| aCustomer |		aCustomer := Customer new.	aCustomer firstName: self defaultCustomerFirstName.	aCustomer lastName: self defaultCustomerLastName.	aCustomer identificationType: self defaultCustomerIdentificationType.	aCustomer identificationNumber: self defaultCustomerIdentificationNumber.		^ aCustomer! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'Dar 7/2/2018 03:18'!existingDefaultCustomerRecord	^ 'EC,',	self defaultCustomerIdentificationType, ',',	self defaultCustomerIdentificationNumber.! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'Dar 7/2/2018 03:15'!defaultCustomerIdentificationNumber		^ '23-25666777-9'! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'Dar 7/2/2018 03:15'!defaultCustomerIdentificationType	^ 'C'! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'Dar 7/2/2018 03:17'!newDefaultCustomerRecord	^ 'NC,',	self defaultCustomerFirstName, ',',	self defaultCustomerLastName, ',',	self defaultCustomerIdentificationType, ',',	self defaultCustomerIdentificationNumber.! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'NicolasPazos 7/2/2018 13:56'!defaultNewCustomerRecord	^ 'NC,Juan,Perez,C,23-25666777-9'! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'Dar 7/2/2018 03:15'!defaultCustomerFirstName	^ 'Juan'! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'Dar 7/2/2018 03:18'!defaultCustomerLastName	^ 'Perez'! !!SupplierImportTest methodsFor: 'tests' stamp: 'Dar 7/2/2018 03:10'!test09CanNotImportSupplierRecordWithLessThanFourFields	| records |	records := self supplierRecordWithTooFewFields.	 	self		importingSupplierFrom: records		shouldRaise: SupplierImporter invalidSupplierRecordErrorDescription.! !!SupplierImportTest methodsFor: 'tests' stamp: 'NicolasPazos 7/2/2018 14:04'!test05bSupplierWithCustomerAndAddressIsImportedCorrectly	self		importSuppliersFrom:			self defaultSupplierRecord , 			self newline , 			self defaultAddressRecord, 			self newline , 			self defaultNewCustomerRecord.				self		assertSystemHasOnlyDefaultSupplierWithNumberOfAddresses: 1		andNumberOfCustomers: 1.			self assertDefaultSupplierHasDefaultAddress.	self assertDefaultSupplierHasDefaultCustomer.	! !!SupplierImportTest methodsFor: 'tests' stamp: 'Dar 7/2/2018 03:10'!test11CanNotImportExistingCustomerRecordWithLessThanThreeFields	| records |	records := self defaultSupplierRecordWithExistingCustomerRecordWithTooFewFields.	 	self		importingSupplierFrom: records		shouldRaise: SupplierImporter invalidExistingCustomerRecordErrorDescription.! !!SupplierImportTest methodsFor: 'tests' stamp: 'Dar 7/2/2018 03:10'!test15CanNotImportExistingCustomerWithoutSupplier	| records |	records := self existingDefaultCustomerRecord.	 	self		importingSupplierFrom: records		shouldRaise: SupplierImporter existentCustomerWithoutSupplierErrorDescription.! !!SupplierImportTest methodsFor: 'tests' stamp: 'Dar 7/2/2018 03:10'!test14CanNotImportNewCustomerWithoutSupplier	| records |	records := self newDefaultCustomerRecord.	 	self		importingSupplierFrom: records		shouldRaise: SupplierImporter newCustomerWithoutSupplierErrorDescription.! !!SupplierImportTest methodsFor: 'tests' stamp: 'Dar 7/2/2018 03:10'!test12CanNotImportNewCustomerRecordWithMoreThanFiveFields	| records |	records := self defaultSupplierRecordWithNewCustomerRecordWithTooManyFields.	 	self		importingSupplierFrom: records		shouldRaise: SupplierImporter invalidNewCustomerRecordErrorDescription.! !!SupplierImportTest methodsFor: 'tests' stamp: 'NicolasPazos 7/2/2018 14:00'!test03NewCustomersOfSuppliersAreImportedCorrectly	self importSuppliersFrom: 		self defaultSupplierRecord,		self newline,		self newDefaultCustomerRecord.		self		assertSystemHasOnlyDefaultSupplierWithNumberOfAddresses: 0		andNumberOfCustomers: 1.	self assertDefaultSupplierHasDefaultCustomer! !!SupplierImportTest methodsFor: 'tests' stamp: 'NicolasPazos 7/2/2018 13:18'!test17bMultipleSuppliersCanBeImported	self importSuppliersFrom:			self verduritasSupplierRecord, 			self newline, 			self caribeñoSupplierRecord.	self assert: system allSuppliers size equals: 2.	self		assertVerduritasSupplierWasImportedWithNumberOfCustomers: 0		andNumberOfAddresses: 0.	self		assertCaribeñoSupplierWasImportedWithNumberOfCustomers: 0 		andNumberOfAddresses: 0! !!SupplierImportTest methodsFor: 'tests' stamp: 'NicolasPazos 7/2/2018 14:03'!test02AddressesOfSuppliersAreImportedCorrectly	self		importSuppliersFrom: 			self defaultSupplierRecord , 			self newline , 			self defaultAddressRecord.		self		assertSystemHasOnlyDefaultSupplierWithNumberOfAddresses: 1		andNumberOfCustomers: 0.	self assertDefaultSupplierHasDefaultAddress! !!SupplierImportTest methodsFor: 'tests' stamp: 'NicolasPazos 7/2/2018 14:18'!test18MultipleSuppliersWithCustomersCanBeImported	self		importSuppliersFrom:			self verduritasSupplierRecord , self newline, 			self defaultNewCustomerRecord , self newline, 			self caribeñoSupplierRecord , self newline, 			self pepeSanchezNewCustomerRecord.					self assert: system allSuppliers size equals: 2.	self		assertVerduritasSupplierWasImportedWithNumberOfCustomers: 1		andNumberOfAddresses: 0.	self		assertCaribeñoSupplierWasImportedWithNumberOfCustomers: 1		andNumberOfAddresses: 0.	self assertDefaultCustomerIsInSupplier: self getVerduritasSupplier.	self assertPepeSanchezIsInSupplier: self getCaribeñoSupplier! !!SupplierImportTest methodsFor: 'tests' stamp: 'NicolasPazos 7/2/2018 14:06'!test07CanNotImportNewCustomerRecordIfCustomerExists	| records |		system addCustomer: self defaultCustomer.	records :=			self defaultSupplierRecord,		self newline,		self newDefaultCustomerRecord.	 	self		importingSupplierFrom: records		shouldRaise: SupplierImporter newCustomerRecordMatchesAnExistingCustomerInSystemErrorMessage.! !!SupplierImportTest methodsFor: 'tests' stamp: 'NicolasPazos 7/2/2018 14:09'!test16CanNotImportAddressWithoutSupplier	| records |	records := self defaultAddressRecord.	 	self		importingSupplierFrom: records		shouldRaise: SupplierImporter addressWithoutSupplierErrorDescription.! !!SupplierImportTest methodsFor: 'tests' stamp: 'Dar 7/2/2018 03:10'!test13CanNotImportNewCustomerRecordWithLessThanFiveFields	| records |	records := self defaultSupplierRecordWithNewCustomerRecordWithTooFewFields.	 	self		importingSupplierFrom: records		shouldRaise: SupplierImporter invalidNewCustomerRecordErrorDescription.! !!SupplierImportTest methodsFor: 'tests' stamp: 'Dar 7/2/2018 03:10'!test10CanNotImportExistingCustomerRecordWithMoreThanThreeFields	| records |	records := self defaultSupplierRecordWithExistingCustomerRecordWithTooManyFields.	 	self		importingSupplierFrom: records		shouldRaise: SupplierImporter invalidExistingCustomerRecordErrorDescription.! !!SupplierImportTest methodsFor: 'tests' stamp: 'NicolasPazos 7/2/2018 14:24'!test19MultipleSuppliersWithCustomersAndAddressesCanBeImported	self		importSuppliersFrom:			self verduritasSupplierRecord , self newline, 			self defaultNewCustomerRecord , self newline, 			self defaultAddressRecord, self newline,			self caribeñoSupplierRecord , self newline, 			self pepeSanchezNewCustomerRecord, self newline,			self defaultAddressRecord.					self assert: system allSuppliers size equals: 2.	self		assertVerduritasSupplierWasImportedWithNumberOfCustomers: 1		andNumberOfAddresses: 1.	self		assertCaribeñoSupplierWasImportedWithNumberOfCustomers: 1		andNumberOfAddresses: 1.			self assertDefaultCustomerIsInSupplier: self getVerduritasSupplier.	self assertDefaultAddressIsInSupplier: self getVerduritasSupplier.	self assertPepeSanchezIsInSupplier: self getCaribeñoSupplier.	self assertDefaultAddressIsInSupplier: self getCaribeñoSupplier .	! !!SupplierImportTest methodsFor: 'tests' stamp: 'NicolasPazos 7/2/2018 13:53'!test01OneSupplierIsImportedCorrectly	self importSuppliersFrom: self defaultSupplierRecord.		self		assertSystemHasOnlyDefaultSupplierWithNumberOfAddresses: 0		andNumberOfCustomers: 0! !!SupplierImportTest methodsFor: 'tests' stamp: 'NicolasPazos 7/2/2018 13:50'!test17ImportFailsWithInvalidRecordType	| records |	records := 'Sun,registro,que,no,se,reconoce'.	 	self		importingSupplierFrom: records		shouldRaise: SupplierImporter invalidRecordTypeErrorDescription.! !!SupplierImportTest methodsFor: 'tests' stamp: 'NicolasPazos 7/2/2018 14:05'!test05ExistentCustomersOfSuppliersAreImportedCorrectly	system addCustomer: self defaultCustomer.	self		importSuppliersFrom: 			self defaultSupplierRecord,			self newline,			self existingDefaultCustomerRecord.			self		assertSystemHasOnlyDefaultSupplierWithNumberOfAddresses: 0		andNumberOfCustomers: 1.			self assertDefaultSupplierHasDefaultCustomer. ! !!SupplierImportTest methodsFor: 'tests' stamp: 'NicolasPazos 7/2/2018 14:05'!test06CanNotImportExistingCustomerRecordIfCustomerDoesNotExist	| records |		records := 		self defaultSupplierRecord, 		self newline,		self existingDefaultCustomerRecord. 	self		importingSupplierFrom: records		shouldRaise: SupplierImporter existentCustomerRecordDoesNotMatchAnyCustomerInSystemErrorMessage.! !!SupplierImportTest methodsFor: 'tests' stamp: 'NicolasPazos 7/2/2018 14:07'!test08CanNotImportSupplierRecordWithMoreThanFourFields	| records |	records := self defaultSupplierRecord,'more,fields'.	 	self		importingSupplierFrom: records		shouldRaise: SupplierImporter invalidSupplierRecordErrorDescription.! !!SupplierImportTest methodsFor: 'asserting' stamp: 'NicolasPazos 7/2/2018 14:18'!assertPepeSanchezIsInSupplier: caribeñoSupplier	self		assert: caribeñoSupplier		hasCustomerNamed: 'Pepe'		withLastName: 'Sanchez'		identifiedAs: 'D'		withNumber: '22333444'		andNumberOfAddresses: 0! !!SupplierImportTest methodsFor: 'asserting' stamp: 'NicolasPazos 7/2/2018 14:21'!assertDefaultAddressIsInSupplier: aSupplier	self		assert: aSupplier		hasAddressAt: 'San Martin'		number: 3322		in: 'Olivos'		zipCode: 1636		province: 'BsAs'! !!SupplierImportTest methodsFor: 'asserting' stamp: 'NicolasPazos 7/2/2018 13:27'!assertCaribeñoSupplierWasImportedWithNumberOfCustomers: aNumberOfCustomers andNumberOfAddresses: aNumberOfAddresses	self		assert: self getCaribeñoSupplier		isNamed: self caribeñoSupplierName		identifiedAs: self caribeñoSupplierIdentificationType		withNumber: self caribeñoSupplierIdentificationNumber		withNumberOfCustomers: aNumberOfCustomers		andNumberOfAddresses: aNumberOfAddresses! !!SupplierImportTest methodsFor: 'asserting' stamp: 'NicolasPazos 7/2/2018 13:06'!assertSystemHasOnlyDefaultSupplierWithNumberOfAddresses: numberOfAddresses andNumberOfCustomers: numberOfCustomers	self assert: system allSuppliers size equals: 1.	self		assert: self getDefaultSupplierFromSystem		isNamed: self defaultSupplierName		identifiedAs: self defaultSupplierIdentificationType		withNumber: self defaultSupplierIdentificationNumber		withNumberOfCustomers: numberOfCustomers		andNumberOfAddresses: numberOfAddresses! !!SupplierImportTest methodsFor: 'asserting' stamp: 'NicolasPazos 7/2/2018 12:22'!assertIsDefaultCustomer: aSystemCustomer	self		assert: aSystemCustomer		isNamed: self defaultCustomer firstName		lastName: self defaultCustomer lastName		identifiedAs: self defaultCustomer identificationType		withNumber: self defaultCustomer identificationNumber		andNumberOfAddresses: self defaultCustomer numberOfAddresses! !!SupplierImportTest methodsFor: 'asserting' stamp: 'NicolasPazos 7/2/2018 14:17'!assertDefaultSupplierHasDefaultCustomer	self assertDefaultCustomerIsInSupplier: self getDefaultSupplierFromSystem ! !!SupplierImportTest methodsFor: 'asserting' stamp: 'NicolasPazos 7/2/2018 12:36'!assert: aSupplier hasCustomerNamed: firstName withLastName: lastName identifiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize 	| customer |	customer := aSupplier		customerIdentifiedAs: idType		numbered: idNumber		ifNone: [ self fail ].	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize! !!SupplierImportTest methodsFor: 'asserting' stamp: 'NicolasPazos 7/2/2018 13:27'!getCaribeñoSupplier	^ self		getSupplierIdentifiedAs: self caribeñoSupplierIdentificationType		numbered: self caribeñoSupplierIdentificationNumber! !!SupplierImportTest methodsFor: 'asserting' stamp: 'NicolasPazos 7/2/2018 14:21'!assertDefaultSupplierHasDefaultAddress	self		assertDefaultAddressIsInSupplier: self getDefaultSupplierFromSystem! !!SupplierImportTest methodsFor: 'asserting' stamp: 'Dar 7/2/2018 03:05'!should: aClosure raiseErrorWithMessage: anErrorMessage	self 		should: aClosure		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self 				assert: anError messageText 				equals: anErrorMessage.				self assert: system customersIsEmpty.				self assert: system suppliersIsEmpty.			]! !!SupplierImportTest methodsFor: 'asserting' stamp: 'DarioReyes 6/30/2018 04:08'!assert: customer isNamed: firstName lastName: lastName identifiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize.! !!SupplierImportTest methodsFor: 'asserting' stamp: 'NicolasPazos 7/2/2018 13:27'!assertVerduritasSupplierWasImportedWithNumberOfCustomers: aNumberOfCustomers andNumberOfAddresses: aNumberOfAddresses	self		assert: self getVerduritasSupplier		isNamed: self verduritasSupplierName		identifiedAs: self verduritasSupplierIdentificationType		withNumber: self verduritasSupplierIdentificationNumber		withNumberOfCustomers: aNumberOfCustomers		andNumberOfAddresses: aNumberOfAddresses! !!SupplierImportTest methodsFor: 'asserting' stamp: 'NicolasPazos 7/2/2018 14:16'!assertDefaultCustomerIsInSupplier: verduritasSupplier	self		assert: verduritasSupplier		hasCustomerNamed: self defaultCustomerFirstName		withLastName: self defaultCustomerLastName		identifiedAs: self defaultCustomerIdentificationType		withNumber: self defaultCustomerIdentificationNumber		andNumberOfAddresses: 0! !!SupplierImportTest methodsFor: 'asserting' stamp: 'Dar 7/2/2018 02:10'!importingSupplierFrom: anInputStream shouldRaise: anErrorMessage	self 		should: [ self importSuppliersFrom: anInputStream]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self 				assert: anError messageText 				equals: anErrorMessage			]! !!SupplierImportTest methodsFor: 'asserting' stamp: 'NicolasPazos 7/2/2018 13:27'!getVerduritasSupplier	^ self		getSupplierIdentifiedAs: self verduritasSupplierIdentificationType		numbered: self verduritasSupplierIdentificationNumber! !!SupplierImportTest methodsFor: 'asserting' stamp: 'NicolasPazos 7/2/2018 13:03'!assert: aSupplier isNamed: aName identifiedAs: anIDType withNumber: anIDNumber withNumberOfCustomers: aNumberOfCustomers andNumberOfAddresses: aNumberOfAddresses	self assert: aSupplier name equals: aName.	self assert: aSupplier identificationType equals: anIDType.	self assert: aSupplier identificationNumber equals: anIDNumber.	self assert: aSupplier numberOfAddresses equals: aNumberOfAddresses.	self assert: aSupplier numberOfCustomers equals: aNumberOfCustomers! !!SupplierImportTest methodsFor: 'asserting' stamp: 'NicolasPazos 7/1/2018 00:59'!assert: supplier hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province		| address |	address := supplier addressAt: streetName ifNone: [self fail]. 	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.! !!SupplierImportTest methodsFor: 'test data - records' stamp: 'Dar 7/2/2018 02:46'!defaultSupplierRecordWithNewCustomerRecordWithTooFewFields	^ self defaultSupplierRecord, self newline, 	'NC,pocos,campos'.! !!SupplierImportTest methodsFor: 'test data - records' stamp: 'Dar 7/2/2018 02:33'!defaultSupplierRecordWithANewCustomer	^ self defaultSupplierRecord, self newline, 	'NC,Juan,Perez,C,23-25666777-9'! !!SupplierImportTest methodsFor: 'test data - records' stamp: 'Dar 7/2/2018 02:32'!newline	^ ''! !!SupplierImportTest methodsFor: 'test data - records' stamp: 'Dar 7/2/2018 02:42'!supplierRecordWithTooFewFields	^ 'S,Supplier1,D'.! !!SupplierImportTest methodsFor: 'test data - records' stamp: 'Dar 7/2/2018 02:45'!defaultSupplierRecordWithExistingCustomerRecordWithTooFewFields	^ self defaultSupplierRecord, self newline, 	'EC,D'.! !!SupplierImportTest methodsFor: 'test data - records' stamp: 'Dar 7/2/2018 02:44'!defaultSupplierRecordWithExistingCustomerRecordWithTooManyFields	^ self defaultSupplierRecord, self newline, 	'EC,jorge,luis,borges'.! !!SupplierImportTest methodsFor: 'test data - records' stamp: 'Dar 7/2/2018 02:45'!defaultSupplierRecordWithNewCustomerRecordWithTooManyFields	^ self defaultSupplierRecord, self newline, 	'NC,un,nuevo,customer,con,muchos,campos'.! !!SupplierImportTest methodsFor: 'test data - records' stamp: 'Dar 7/2/2018 02:57'!defaultSupplierRecordWithNewDefaultCustomer	^ self defaultSupplierRecord, self newline, 	self newDefaultCustomerRecord! !!SupplierImportTest methodsFor: 'test data - records' stamp: 'Dar 7/2/2018 02:50'!defaultSupplierRecordWithAnAddress	^ self defaultSupplierRecord, self newline, 	self defaultAddressRecord.! !!SupplierImportTest methodsFor: 'test data - records' stamp: 'NicolasPazos 7/2/2018 14:13'!pepeSanchezNewCustomerRecord	^ 'NC,Pepe,Sanchez,D,22333444'! !!SupplierImportTest methodsFor: 'setup-teardown' stamp: 'Dar 7/2/2018 02:04'!setUp	system := Environment current createERPSystem.	system start.	system beginTransaction.	! !!SupplierImportTest methodsFor: 'setup-teardown' stamp: 'DarioReyes 6/28/2018 19:41'!tearDown	system commit.	system shutdown! !CSVImporter subclass: #SupplierImporter	instanceVariableNames: 'newSupplier addressRecordReader newCustomerRecordReader'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!SupplierImporter methodsFor: 'error signal' stamp: 'NicolasPazos 7/1/2018 01:55'!signalExistentCustomerWithoutSuplierError	self error: self class existentCustomerWithoutSupplierErrorDescription.! !!SupplierImporter methodsFor: 'error signal' stamp: 'NicolasPazos 7/1/2018 01:28'!signalNewCustomerExists	self		error:			self class				newCustomerRecordMatchesAnExistingCustomerInSystemErrorMessage! !!SupplierImporter methodsFor: 'error signal' stamp: 'NicolasPazos 7/1/2018 01:44'!signalInvalidExistentCustomerRecord	self error: self class invalidExistingCustomerRecordErrorDescription.! !!SupplierImporter methodsFor: 'error signal' stamp: 'DarioReyes 6/30/2018 03:12'!signalNewCustomerWithoutSuplierError	self error: self class newCustomerWithoutSupplierErrorDescription.! !!SupplierImporter methodsFor: 'error signal' stamp: 'NicolasPazos 7/1/2018 01:39'!signalInvalidSupplierRecord	self error: self class invalidSupplierRecordErrorDescription.! !!SupplierImporter methodsFor: 'error signal' stamp: 'DarioReyes 6/29/2018 21:21'!signalAddressWithoutSuplierError	self error: self class addressWithoutSupplierErrorDescription.! !!SupplierImporter methodsFor: 'error signal' stamp: 'NicolasPazos 7/1/2018 01:48'!signalInvalidNewCustomerRecord 		self error: self class invalidNewCustomerRecordErrorDescription ! !!SupplierImporter methodsFor: 'error signal' stamp: 'NicolasPazos 7/1/2018 01:11'!signalNotExistingCustomer	^ self		error:			self class				existentCustomerRecordDoesNotMatchAnyCustomerInSystemErrorMessage! !!SupplierImporter methodsFor: 'importing - private' stamp: 'Dar 7/2/2018 00:56'!importRecord		self isNewCustomerRecord ifTrue: [ ^self importNewCustomer ].	self isExistentCustomerRecord ifTrue: [ ^self importExistentCustomer ].	self isAddressRecord ifTrue: [ ^self importAddress ].	self isSupplierRecord ifTrue: [ ^self importSupplier ].		self signalInvalidRecordType! !!SupplierImporter methodsFor: 'importing - private - existant customer' stamp: 'Dar 7/2/2018 00:52'!importExistentCustomer	| customer |	self assertThereIsSupplierForExistentCustomer.	self assertValidExistentCustomerRecordSize.	customer := system		customerIdentifiedAs: record second		numbered: record third		ifNone:			[ self signalNotExistingCustomer ].	newSupplier addCustomer: customer! !!SupplierImporter methodsFor: 'importing - private - existant customer' stamp: 'NicolasPazos 7/1/2018 00:50'!isExistentCustomerRecord	^ record first = 'EC'! !!SupplierImporter methodsFor: 'importing - private - existant customer' stamp: 'NicolasPazos 7/1/2018 01:44'!assertValidExistentCustomerRecordSize	record size ~= 3 ifTrue: [ self signalInvalidExistentCustomerRecord ]! !!SupplierImporter methodsFor: 'importing - private - existant customer' stamp: 'NicolasPazos 7/1/2018 00:51'!assertThereIsSupplierForExistentCustomer	newSupplier isNil ifTrue: [ self signalExistentCustomerWithoutSuplierError ].	! !!SupplierImporter methodsFor: 'importing - private - new customer' stamp: 'Dar 7/2/2018 00:56'!assertDoesNotExistCustomerIdentifiedAs: identificationType numbered: identificationNumber	system		customerIdentifiedAs: identificationType		numbered: identificationNumber		ifNone: [ ^ true ].	self signalNewCustomerExists.! !!SupplierImporter methodsFor: 'importing - private - new customer' stamp: 'DarioReyes 6/30/2018 03:14'!isNewCustomerRecord	^ record first = 'NC'! !!SupplierImporter methodsFor: 'importing - private - new customer' stamp: 'Dar 7/2/2018 00:05'!importNewCustomer	| customer |		self assertThereIsSupplierForNewCustomer.		[ customer := newCustomerRecordReader read: record ]		on: Error - MessageNotUnderstood		do: [ self signalInvalidNewCustomerRecord ].		self 		assertDoesNotExistCustomerIdentifiedAs: customer identificationType 		numbered: customer identificationNumber.			newSupplier addCustomer: customer.	system addCustomer: customer! !!SupplierImporter methodsFor: 'importing - private - new customer' stamp: 'DarioReyes 6/30/2018 03:11'!assertThereIsSupplierForNewCustomer	newSupplier isNil ifTrue: [ self signalNewCustomerWithoutSuplierError ].	! !!SupplierImporter methodsFor: 'initialization' stamp: 'NicolasPazos 7/2/2018 12:18'!initializeOn: aReadStream using: anERPSystem	readStream := aReadStream.	system := anERPSystem.		addressRecordReader := AddressRecordReader new.	newCustomerRecordReader := CustomerRecordReader new.! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'Dar 7/1/2018 21:47'!importAddress	| newAddress |	self assertThereIsSupplierForAddress.		newAddress := addressRecordReader read: record.		^ newSupplier addAddress: newAddress! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'DarioReyes 6/29/2018 21:20'!assertThereIsSupplierForAddress	newSupplier isNil ifTrue: [ self signalAddressWithoutSuplierError ].	! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'DarioReyes 6/28/2018 20:17'!isAddressRecord	^ record first = 'A'! !!SupplierImporter methodsFor: 'importing - private - supplier' stamp: 'DarioReyes 6/28/2018 20:23'!assertValidSupplierRecordSize	record size ~= 4 ifTrue: [ self signalInvalidSupplierRecord ].! !!SupplierImporter methodsFor: 'importing - private - supplier' stamp: 'DarioReyes 6/30/2018 03:57'!importSupplier	self assertValidSupplierRecordSize.	newSupplier := Supplier new.	newSupplier name: record second.	newSupplier identificationType: record third.	newSupplier identificationNumber: record fourth.	system addSupplier: newSupplier.! !!SupplierImporter methodsFor: 'importing - private - supplier' stamp: 'DarioReyes 6/28/2018 20:20'!isSupplierRecord	^ record first = 'S'! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SupplierImporter class	instanceVariableNames: ''!!SupplierImporter class methodsFor: 'error descriptions' stamp: 'DarioReyes 6/29/2018 21:21'!addressWithoutSupplierErrorDescription		^'There is no supplier for the imported address'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'DarioReyes 6/28/2018 20:17'!invalidAddressRecordErrorDescription		^'Invalid address record'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'NicolasPazos 7/1/2018 01:46'!invalidNewCustomerRecordErrorDescription	^'Record de New Customer inválido'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'NicolasPazos 7/1/2018 01:40'!invalidSupplierRecordErrorDescription	^'Record de Supplier inválido'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'NicolasPazos 7/1/2018 01:55'!existentCustomerWithoutSupplierErrorDescription		^'There is no supplier for the imported existant customer'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'NicolasPazos 7/1/2018 01:43'!invalidExistingCustomerRecordErrorDescription	^'Record de Existing Customer inválido'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'NicolasPazos 7/1/2018 01:12'!existentCustomerRecordDoesNotMatchAnyCustomerInSystemErrorMessage	^'Un supuesto cliente existente no está en el sistema'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'NicolasPazos 7/1/2018 01:16'!newCustomerRecordMatchesAnExistingCustomerInSystemErrorMessage	^'Los clientes nuevos no deberían estar en el sistema.'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'DarioReyes 6/30/2018 03:12'!newCustomerWithoutSupplierErrorDescription		^'There is no supplier for the imported new customer'! !!SupplierImporter class methodsFor: 'instance creation' stamp: 'DarioReyes 6/28/2018 20:17'!from: aReadStream using: aCustomerSystem	^ self new initializeOn: aReadStream using: aCustomerSystem! !Object subclass: #System	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!System methodsFor: 'transaction' stamp: 'Dar 7/1/2018 20:53'!beginTransaction	self subclassResponsibility! !!System methodsFor: 'transaction' stamp: 'Dar 7/1/2018 20:53'!commit	self subclassResponsibility! !!System methodsFor: 'system live cycle' stamp: 'Dar 7/1/2018 20:53'!start	self subclassResponsibility! !!System methodsFor: 'system live cycle' stamp: 'Dar 7/1/2018 20:53'!shutdown	self subclassResponsibility! !System subclass: #ERPSystem	instanceVariableNames: 'supplierSubsystem customerSubsystem'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!ERPSystem methodsFor: 'system live cycle' stamp: 'DarioReyes 6/30/2018 03:54'!beginTransaction	self beginCustomerTransaction.	self beginSupplierTransaction. ! !!ERPSystem methodsFor: 'system live cycle' stamp: 'DarioReyes 6/30/2018 03:54'!commit	self commitCustomerTransaction.	self commitSupplierTransaction. ! !!ERPSystem methodsFor: 'system live cycle' stamp: 'DarioReyes 6/30/2018 03:55'!start	self startCustomerSystem.	self startSupplierSystem. ! !!ERPSystem methodsFor: 'system live cycle' stamp: 'DarioReyes 6/30/2018 03:55'!shutdown	self shutdownCustomerSystem.	self shutdownSupplierSystem. ! !!ERPSystem methodsFor: 'suppliers' stamp: 'Dar 7/2/2018 02:00'!customersIsEmpty	^ customerSubsystem membersIsEmpty! !!ERPSystem methodsFor: 'suppliers' stamp: 'DarioReyes 6/30/2018 03:47'!commitSupplierTransaction	supplierSubsystem commit! !!ERPSystem methodsFor: 'suppliers' stamp: 'DarioReyes 6/30/2018 03:47'!beginSupplierTransaction	supplierSubsystem beginTransaction! !!ERPSystem methodsFor: 'suppliers' stamp: 'DarioReyes 6/30/2018 03:48'!shutdownSupplierSystem	supplierSubsystem shutdown! !!ERPSystem methodsFor: 'suppliers' stamp: 'Dar 7/2/2018 01:55'!addSupplier: aSupplier	aSupplier customers do: [ :customer |		customerSubsystem 			memberIdentifiedAs: customer identificationType 			numbered: customer identificationNumber			ifNone: [ self error: self class supplierHasCustomerNotInSystemErrorMessage ]	].	supplierSubsystem add: aSupplier.! !!ERPSystem methodsFor: 'suppliers' stamp: 'Dar 7/2/2018 00:46'!supplierIdentifiedAs: anIDType numbered: anIDNumber ifNone: aClosure	^ supplierSubsystem		memberIdentifiedAs: anIDType		numbered: anIDNumber		ifNone: aClosure! !!ERPSystem methodsFor: 'suppliers' stamp: 'Dar 7/2/2018 00:47'!allSuppliers	^ supplierSubsystem allMembers! !!ERPSystem methodsFor: 'suppliers' stamp: 'Dar 7/2/2018 00:46'!customerIdentifiedAs: anIDType numbered: anIDNumber ifNone: aClosure	^ customerSubsystem		memberIdentifiedAs: anIDType		numbered: anIDNumber		ifNone: aClosure! !!ERPSystem methodsFor: 'suppliers' stamp: 'DarioReyes 6/30/2018 03:49'!startSupplierSystem	supplierSubsystem start! !!ERPSystem methodsFor: 'customers' stamp: 'DarioReyes 6/30/2018 03:51'!beginCustomerTransaction	customerSubsystem beginTransaction.! !!ERPSystem methodsFor: 'customers' stamp: 'DarioReyes 6/30/2018 03:51'!commitCustomerTransaction	customerSubsystem commit.! !!ERPSystem methodsFor: 'customers' stamp: 'DarioReyes 6/30/2018 03:50'!addCustomer: aCustomer	customerSubsystem add: aCustomer.! !!ERPSystem methodsFor: 'customers' stamp: 'Dar 7/2/2018 02:01'!allCustomers	^ customerSubsystem allMembers! !!ERPSystem methodsFor: 'customers' stamp: 'DarioReyes 6/30/2018 03:51'!shutdownCustomerSystem	customerSubsystem shutdown.! !!ERPSystem methodsFor: 'customers' stamp: 'DarioReyes 6/30/2018 03:51'!startCustomerSystem	customerSubsystem start.! !!ERPSystem methodsFor: 'customers' stamp: 'asdasd 7/2/2018 03:56'!hasCustomerIdentifiedAs: anIDType numbered: anIDNumber 	^customerSubsystem hasMemberIdentifiedAs: anIDType numbered: anIDNumber! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ERPSystem class	instanceVariableNames: ''!!ERPSystem class methodsFor: 'error messages' stamp: 'Dar 7/2/2018 01:56'!supplierHasCustomerNotInSystemErrorMessage	^'A supplier can not add a customer that is not already in the system'! !System subclass: #PartySystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!PartySystem methodsFor: 'members' stamp: 'Dar 7/2/2018 00:40'!membersIsEmpty	self subclassResponsibility! !!PartySystem methodsFor: 'members' stamp: 'Dar 7/2/2018 00:40'!memberIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNone: aClosure	self subclassResponsibility! !!PartySystem methodsFor: 'members' stamp: 'Dar 7/2/2018 00:40'!allMembers	self subclassResponsibility! !!PartySystem methodsFor: 'members' stamp: 'Dar 7/2/2018 01:26'!add: aMember	self subclassResponsibility! !PartySystem subclass: #PersistantPartySystem	instanceVariableNames: 'session'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!PersistantPartySystem methodsFor: 'members' stamp: 'Dar 7/2/2018 01:23'!membersIsEmpty	^ self allMembers isEmpty! !!PersistantPartySystem methodsFor: 'members' stamp: 'Dar 7/2/2018 01:25'!memberIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNone: aClosure	| customers |	customers := session		select: [ :aCustomer | 			aCustomer identificationType = anIdentifycationType				and: [ aCustomer identificationNumber = anIdentificationNumber ] ]		ofType: self persistedClass .	customers size = 1		ifFalse: [ ^aClosure value].	^ customers anyOne! !!PersistantPartySystem methodsFor: 'members' stamp: 'Dar 7/2/2018 01:25'!allMembers	^ session selectAllOfType: self persistedClass ! !!PersistantPartySystem methodsFor: 'members' stamp: 'Dar 7/2/2018 01:22'!add: aCustomer	session persist: aCustomer! !!PersistantPartySystem methodsFor: 'initialization' stamp: 'Dar 7/2/2018 01:11'!initialize	self initializeSession.! !!PersistantPartySystem methodsFor: 'initialization' stamp: 'Dar 7/2/2018 01:08'!initializeSession
	self subclassResponsibility! !!PersistantPartySystem methodsFor: 'transaction' stamp: 'Dar 7/2/2018 01:10'!beginTransaction	session beginTransaction! !!PersistantPartySystem methodsFor: 'transaction' stamp: 'Dar 7/2/2018 01:10'!commit	session commit! !!PersistantPartySystem methodsFor: 'configuration' stamp: 'Dar 7/2/2018 01:25'!persistedClass	self subclassResponsibility.! !!PersistantPartySystem methodsFor: 'system live cycle' stamp: 'Dar 7/2/2018 01:09'!start	session start! !!PersistantPartySystem methodsFor: 'system live cycle' stamp: 'Dar 7/2/2018 01:09'!shutdown	session shutdown! !PersistantPartySystem subclass: #PersistentCustomerSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!PersistentCustomerSystem methodsFor: 'configuration' stamp: 'Dar 7/2/2018 01:25'!persistedClass	^ Customer! !!PersistentCustomerSystem methodsFor: 'initialization' stamp: 'Dar 7/2/2018 01:18'!initializeSession	session := DataBaseSession		for: (Array		with: RecordMapper addressMapping		with: RecordMapper customerMapping)! !ERPSystem subclass: #PersistentERPSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!PersistentERPSystem methodsFor: 'initialization' stamp: 'NicolasPazos 7/2/2018 12:14'!initialize	customerSubsystem := PersistentCustomerSystem new.	supplierSubsystem := PersistentSupplierSystem new.! !PersistantPartySystem subclass: #PersistentSupplierSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!PersistentSupplierSystem methodsFor: 'initialization' stamp: 'Dar 7/2/2018 01:18'!initializeSession	session := DataBaseSession		for: (Array		with: RecordMapper addressMapping		with: RecordMapper customerMapping		with: RecordMapper supplierMapping)! !!PersistentSupplierSystem methodsFor: 'configuration' stamp: 'Dar 7/2/2018 01:24'!persistedClass	^ Supplier! !ERPSystem subclass: #TransientERPSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!TransientERPSystem methodsFor: 'initialization' stamp: 'Dar 7/2/2018 01:05'!initialize	customerSubsystem := TransientPartySystem new.	supplierSubsystem := TransientPartySystem new.! !PartySystem subclass: #TransientPartySystem	instanceVariableNames: 'customers members'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!TransientPartySystem methodsFor: 'system live cycle' stamp: 'Dar 7/2/2018 01:01'!start! !!TransientPartySystem methodsFor: 'system live cycle' stamp: 'Dar 7/2/2018 01:01'!shutdown! !!TransientPartySystem methodsFor: 'members' stamp: 'Dar 7/2/2018 00:59'!add: aMember	members add: aMember! !!TransientPartySystem methodsFor: 'members' stamp: 'Dar 7/2/2018 01:01'!membersIsEmpty	^members isEmpty ! !!TransientPartySystem methodsFor: 'members' stamp: 'Dar 7/2/2018 01:00'!allMembers	^members copy! !!TransientPartySystem methodsFor: 'members' stamp: 'Dar 7/2/2018 01:01'!memberIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNone: aClosure		^members detect: [ :aMember | aMember isIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ] ifNone: aClosure.! !!TransientPartySystem methodsFor: 'members' stamp: 'asdasd 7/2/2018 03:56'!hasMemberIdentifiedAs: anIDType numbered: anIDNumber 	members 		detect: [ :aMember | aMember isIdentifiedAs: anIDType numbered: anIDNumber  ] 		ifFound: [ ^true ]		ifNone: [ ^false ]! !!TransientPartySystem methodsFor: 'initialization' stamp: 'Dar 7/2/2018 01:00'!initialize		members := OrderedCollection new! !!TransientPartySystem methodsFor: 'transaction' stamp: 'Dar 7/2/2018 01:00'!beginTransaction! !!TransientPartySystem methodsFor: 'transaction' stamp: 'Dar 7/2/2018 01:00'!commit! !