Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetNumber: aStreetNumber 	streetNumber := aStreetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetName: aStreetName 	streetName := aStreetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:08'!province: aProvince 	province := aProvince	! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:08'!zipCode: aZipCode 	zipCode := aZipCode! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !!Address methodsFor: 'testing' stamp: 'HernanWilkinson 11/1/2016 10:06'!isAt: aStreetName	^streetName = aStreetName ! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:07'!town: aTown 	town := aTown! !Object subclass: #Customer	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Customer methodsFor: 'initialization' stamp: 'HernanWilkinson 10/28/2016 13:26'!initialize	super initialize.	addresses := OrderedCollection new.! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 11/1/2016 09:43'!numberOfAddresses		^addresses size! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:27'!addAddress: anAddress 	addresses add: anAddress ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 11/1/2016 10:05'!addressAt: aStreetName ifNone: noneClosure 		^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:25'!addresses	^ addresses! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 11/1/2016 18:03'!addressesIsEmpty		^addresses isEmpty! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 11/4/2016 09:42'!isIdentifiedAs: anIdType numbered: anIdNumber 		^identificationType = anIdType and: [ identificationNumber = anIdNumber  ]! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationType		^identificationType ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationNumber		^identificationNumber ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!firstName: aName 	firstName := aName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!lastName: aLastName 	lastName := aLastName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !TestCase subclass: #CustomerImportTest	instanceVariableNames: 'importer system'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/4/2016 09:51'!setUp	system := Environment current createCustomerSystem.	system start.	system beginTransaction! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/4/2016 09:52'!tearDown	system commit.	system shutdown! !!CustomerImportTest methodsFor: 'test data' stamp: 'HernanWilkinson 11/2/2016 15:52'!dataWithEmptyLine		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data' stamp: 'HernanWilkinson 11/2/2016 10:46'!validTestData	^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/3/2016 09:10'!assertImportedCustomersSizeIsCorrect	self assert: system allCustomers size equals: 2! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/3/2016 09:20'!assertPepeSanchezWasImportedCorrectly	| customer |	customer := self alwaysImportedCustomer. 		self assert: customer isNamed: 'Pepe' lastName: 'Sanchez' identfiedAs: self alwaysImportedCustomerIdType withNumber: self alwaysImportedCustomerIdNumber andNumberOfAddresses: 2.	self assert: customer hasAddressAt: 'San Martin' number: 3322 in: 'Olivos' zipCode: 1636 province: 'BsAs'.	self assert: customer hasAddressAt: 'Maipu' number: 888 in: 'Florida' zipCode: 1122 province: 'Buenos Aires'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'NicolasPazos 7/1/2018 01:08'!assertJuanPerezWasImportedCorrectly	| customer idType idNumber |	idType := 'C'.	idNumber := '23-25666777-9'.	customer := system		customerIdentifiedAs: idType		numbered: idNumber		ifNone: [  ].	self		assert: customer		isNamed: 'Juan'		lastName: 'Perez'		identfiedAs: idType		withNumber: idNumber		andNumberOfAddresses: 1.	self		assert: customer		hasAddressAt: 'Alem'		number: 1122		in: 'CABA'		zipCode: 1001		province: 'CABA'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 11:00'!assert: customer hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := customer addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 10:56'!assert: customer isNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize .! !!CustomerImportTest methodsFor: 'importing' stamp: 'HernanWilkinson 11/4/2016 09:27'!importCustomersFrom: inputStream	(CustomerImporter from: inputStream using: system) import! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordWithLessThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordStartingWithMoreThanOneATestData		^ ReadStream on: self alwaysImportedCustomerRecord,'AA,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordWithMoreThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs,y otra cosa'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/1/2016 15:59'!addressWithoutCustomerTestData		^ ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 15:52'!testEmptyLinesAreRecognizedAsInvalidRecords		self		should: [ self importCustomersFrom: self dataWithEmptyLine ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/3/2016 09:11'!testCanNotImportAddressWithoutCustomer	self		should: [ self importCustomersFrom: self addressWithoutCustomerTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter addressWithoutCustomerErrorDescription.			self assert: system customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/3/2016 09:11'!testShouldNotImportCustomerRecordsStartingWithMoreThanC	self		should: [ self				importCustomersFrom: self customerRecordStartingWithMoreThanOneCTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: system customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 10:42'!testCanNotImportAddressRecordWithMoreThanSixFields	self 		should: [ self importCustomersFrom: self addressRecordWithMoreThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/3/2016 09:11'!testCanNotImportCustomerRecordWithMoreThanFiveFields	self		should: [ self				importCustomersFrom: self customerRecordWithMoreThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidCustomerRecordErrorDescription.			self assert: system customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/1/2016 15:56'!testImportCustomers	self importCustomersFrom: self validTestData.	self assertImportedCustomersSizeIsCorrect.	self assertPepeSanchezWasImportedCorrectly.	self assertJuanPerezWasImportedCorrectly! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 10:42'!testShouldNotImportAddressRecordsStartingWithMoreThanA	self 		should: [ self importCustomersFrom: self addressRecordStartingWithMoreThanOneATestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 10:41'!testCanNotImportAddressRecordWithLessThanSixFields		self		should: [ self importCustomersFrom: self addressRecordWithLessThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/3/2016 09:11'!testCanNotImportCustomerRecordWithLessThanFiveFields	self		should: [ self				importCustomersFrom: self customerRecordWithLessThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidCustomerRecordErrorDescription.			self assert: system customersIsEmpty ]! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:47'!alwaysImportedCustomerRecord	^ 'C,Pepe,Sanchez,', self alwaysImportedCustomerIdType, ',', self alwaysImportedCustomerIdNumber ! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'NicolasPazos 7/1/2018 01:08'!alwaysImportedCustomer	| anIdentificationNumber anIdentifycationType |	anIdentifycationType := self alwaysImportedCustomerIdType.	anIdentificationNumber := self alwaysImportedCustomerIdNumber.	^ system		customerIdentifiedAs: anIdentifycationType		numbered: anIdentificationNumber		ifNone: [  ]! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:47'!alwaysImportedCustomerIdNumber	^ '22333444'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:53'!customerRecordWithMoreThanFiveFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,',x'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:50'!customerRecordWithLessThanFiveFieldsTestData		^ ReadStream on: 'C,Pepe,Sanchez,D'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/1/2016 17:48'!customerRecordStartingWithMoreThanOneCTestData		^ ReadStream on:'CC,Pepe,Sanchez,D,22333444'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:46'!alwaysImportedCustomerIdType	^ 'D'! !Object subclass: #CustomerImporter	instanceVariableNames: 'line readStream record newCustomer system'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImporter methodsFor: 'initialization' stamp: 'HernanWilkinson 11/4/2016 09:26'!initializeOn: aReadStream using: aCustomerSystem	readStream := aReadStream.	system := aCustomerSystem! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/2/2016 15:54'!convertLineToRecord	record := line substrings: {$,}.		self assertRecordNotEmpty! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/2/2016 15:55'!assertRecordNotEmpty		record isEmpty ifTrue: [ self signalInvalidRecordType ]! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/1/2016 17:52'!importRecord		self isCustomerRecord ifTrue: [ ^self importCustomer ].	self isAddressRecord ifTrue: [ ^self importAddress ].		self signalInvalidRecordType! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/2/2016 10:55'!canImportNextLine	line := readStream nextLine.	^ line notNil! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/2/2016 10:52'!signalInvalidCustomerRecord 		self error: self class invalidCustomerRecordErrorDescription ! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/1/2016 16:01'!signalAddressWithoutCustomerError	self error: self class addressWithoutCustomerErrorDescription.! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/1/2016 17:54'!signalInvalidRecordType	self error: self class invalidRecordTypeErrorDescription! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/1/2016 18:01'!signalInvalidAddressRecord 		self error: self class invalidAddressRecordErrorDescription ! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:56'!assertThereIsCustsomerForAddress	newCustomer isNil ifTrue: [ self signalAddressWithoutCustomerError ].	! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:57'!importAddress	| newAddress |	self assertThereIsCustsomerForAddress.	self assertValidAddressRecordSize.		newAddress := Address new.	newAddress streetName: record second.	newAddress streetNumber: record third asInteger.	newAddress town: record fourth.	newAddress zipCode: record fifth asInteger.	newAddress province: record sixth.	^ newCustomer addAddress: newAddress! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:57'!assertValidAddressRecordSize		record size ~= 6 ifTrue: [ self signalInvalidAddressRecord ].	! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:55'!isAddressRecord	^ record first = 'A'! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'HernanWilkinson 11/4/2016 09:33'!importCustomer	self assertValidCustomerRecordSize.	newCustomer := Customer new.	newCustomer firstName: record second.	newCustomer lastName: record third.	newCustomer identificationType: record fourth.	newCustomer identificationNumber: record fifth.	system add: newCustomer! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'HernanWilkinson 11/2/2016 10:57'!assertValidCustomerRecordSize		record size ~= 5 ifTrue: [ self signalInvalidCustomerRecord ].	! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'HernanWilkinson 11/2/2016 10:55'!isCustomerRecord	^ record first = 'C'! !!CustomerImporter methodsFor: 'importing' stamp: 'HernanWilkinson 11/1/2016 17:51'!import	[ self canImportNextLine ] whileTrue: [ 		self convertLineToRecord.		self importRecord ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CustomerImporter class	instanceVariableNames: ''!!CustomerImporter class methodsFor: 'instance creation' stamp: 'HernanWilkinson 11/4/2016 09:27'!from: aReadStream using: aCustomerSystem	^ self new initializeOn: aReadStream using: aCustomerSystem! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/1/2016 17:54'!invalidRecordTypeErrorDescription		^'Invalid record type'! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/1/2016 16:02'!addressWithoutCustomerErrorDescription		^'There is no Customer for the imported address'! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/1/2016 18:00'!invalidAddressRecordErrorDescription		^'Invalid address record'! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/2/2016 10:51'!invalidCustomerRecordErrorDescription		^'Invalid customer record'! !Object subclass: #CustomerSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerSystem methodsFor: 'transaction' stamp: 'HernanWilkinson 11/4/2016 09:35'!commit	self subclassResponsibility! !!CustomerSystem methodsFor: 'transaction' stamp: 'HernanWilkinson 11/4/2016 09:35'!beginTransaction	self subclassResponsibility! !!CustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:35'!customersIsEmpty	self subclassResponsibility! !!CustomerSystem methodsFor: 'customers' stamp: 'NicolasPazos 7/1/2018 01:09'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNone: aClosure	self subclassResponsibility! !!CustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:35'!allCustomers	self subclassResponsibility! !!CustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:35'!add: aCustomer	self subclassResponsibility! !!CustomerSystem methodsFor: 'system live cycle' stamp: 'HernanWilkinson 11/4/2016 09:52'!shutdown	self subclassResponsibility! !!CustomerSystem methodsFor: 'system live cycle' stamp: 'HernanWilkinson 11/4/2016 09:51'!start	self subclassResponsibility! !Object subclass: #ERPSystem	instanceVariableNames: 'supplierSubsystem customerSubsystem'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!ERPSystem methodsFor: 'system live cycle' stamp: 'DarioReyes 6/30/2018 03:54'!commit	self commitCustomerTransaction.	self commitSupplierTransaction. ! !!ERPSystem methodsFor: 'system live cycle' stamp: 'DarioReyes 6/30/2018 03:55'!shutdown	self shutdownCustomerSystem.	self shutdownSupplierSystem. ! !!ERPSystem methodsFor: 'system live cycle' stamp: 'DarioReyes 6/30/2018 03:55'!start	self startCustomerSystem.	self startSupplierSystem. ! !!ERPSystem methodsFor: 'system live cycle' stamp: 'DarioReyes 6/30/2018 03:54'!beginTransaction	self beginCustomerTransaction.	self beginSupplierTransaction. ! !!ERPSystem methodsFor: 'system live cycle' stamp: 'DarioReyes 7/1/2018 13:37'!initialize	self subclassResponsibility! !!ERPSystem methodsFor: 'suppliers' stamp: 'DarioReyes 6/30/2018 03:48'!shutdownSupplierSystem	supplierSubsystem shutdown! !!ERPSystem methodsFor: 'suppliers' stamp: 'DarioReyes 6/30/2018 03:30'!addSupplier: aSupplier	supplierSubsystem add: aSupplier.! !!ERPSystem methodsFor: 'suppliers' stamp: 'NicolasPazos 7/1/2018 02:00'!supplierIdentifiedAs: anIDType numbered: anIDNumber ifNone: aClosure	^ supplierSubsystem		supplierIdentifiedAs: anIDType		numbered: anIDNumber		ifNone: aClosure! !!ERPSystem methodsFor: 'suppliers' stamp: 'DarioReyes 6/30/2018 03:49'!startSupplierSystem	supplierSubsystem start! !!ERPSystem methodsFor: 'suppliers' stamp: 'DarioReyes 6/30/2018 03:47'!beginSupplierTransaction	supplierSubsystem beginTransaction! !!ERPSystem methodsFor: 'suppliers' stamp: 'DarioReyes 6/30/2018 03:57'!allSuppliers	^ supplierSubsystem allSuppliers! !!ERPSystem methodsFor: 'suppliers' stamp: 'DarioReyes 6/30/2018 03:47'!commitSupplierTransaction	supplierSubsystem commit! !!ERPSystem methodsFor: 'customers' stamp: 'DarioReyes 6/30/2018 03:51'!shutdownCustomerSystem	customerSubsystem shutdown.! !!ERPSystem methodsFor: 'customers' stamp: 'DarioReyes 6/30/2018 03:57'!allCustomers	^ customerSubsystem allCustomers.! !!ERPSystem methodsFor: 'customers' stamp: 'DarioReyes 6/30/2018 03:51'!beginCustomerTransaction	customerSubsystem beginTransaction.! !!ERPSystem methodsFor: 'customers' stamp: 'DarioReyes 6/30/2018 03:51'!commitCustomerTransaction	customerSubsystem commit.! !!ERPSystem methodsFor: 'customers' stamp: 'DarioReyes 6/30/2018 03:51'!startCustomerSystem	customerSubsystem start.! !!ERPSystem methodsFor: 'customers' stamp: 'DarioReyes 6/30/2018 03:50'!addCustomer: aCustomer	customerSubsystem add: aCustomer.! !!ERPSystem methodsFor: 'customers' stamp: 'NicolasPazos 7/1/2018 01:08'!customerIdentifiedAs: anIDType numbered: anIDNumber ifNone: aClosure	^ customerSubsystem		customerIdentifiedAs: anIDType		numbered: anIDNumber		ifNone: aClosure! !!ERPSystem methodsFor: 'customers' stamp: 'NicolasPazos 7/1/2018 01:24'!hasCustomerIdentifiedAs: anIDType numbered: anIDNumber 	^customerSubsystem hasCustomerIdentifiedAs: anIDType numbered: anIDNumber! !Object subclass: #Environment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Environment methodsFor: 'system creation' stamp: 'DarioReyes 7/1/2018 13:40'!createERPSystem	self subclassResponsibility ! !!Environment methodsFor: 'system creation' stamp: 'HernanWilkinson 11/4/2016 09:49'!createCustomerSystem	self subclassResponsibility ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Environment class	instanceVariableNames: ''!!Environment class methodsFor: 'enviroment selection' stamp: 'HernanWilkinson 11/4/2016 09:46'!current		^self allSubclasses 		detect: [ :anEnvironemntClass | anEnvironemntClass isCurrent ]		ifFound: [ :anEnvironmentClass | anEnvironmentClass new ]		ifNone: [ self error: 'No environment detected' ]! !!Environment class methodsFor: 'enviroment selection' stamp: 'HernanWilkinson 11/4/2016 09:49'!isCurrent	self subclassResponsibility ! !Environment subclass: #DevelpmentEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!DevelpmentEnvironment methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/4/2016 09:47'!createCustomerSystem		^TransientCustomerSystem new! !!DevelpmentEnvironment methodsFor: 'system creation' stamp: 'DarioReyes 7/1/2018 13:40'!createERPSystem		^TransientERPSystem new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DevelpmentEnvironment class	instanceVariableNames: ''!!DevelpmentEnvironment class methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/4/2016 09:47'!isCurrent		^IntegrationEnvironment isCurrent not! !Environment subclass: #IntegrationEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!IntegrationEnvironment methodsFor: 'system creation' stamp: 'DarioReyes 7/1/2018 13:43'!createERPSystem		^PersistantERPSystem new! !!IntegrationEnvironment methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/4/2016 09:45'!createCustomerSystem		^PersistentCustomerSystem new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!IntegrationEnvironment class	instanceVariableNames: ''!!IntegrationEnvironment class methodsFor: 'testing' stamp: 'DarioReyes 7/1/2018 14:01'!isCurrent		^false! !ERPSystem subclass: #PersistantERPSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!PersistantERPSystem methodsFor: 'initialization' stamp: 'DarioReyes 7/1/2018 13:38'!initialize	customerSubsystem := PersistentCustomerSystem new.	supplierSubsystem := PersistantSupplierSystem new.! !CustomerSystem subclass: #PersistentCustomerSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!PersistentCustomerSystem methodsFor: 'system live cycle' stamp: 'HernanWilkinson 11/4/2016 09:52'!shutdown	session shutdown! !!PersistentCustomerSystem methodsFor: 'system live cycle' stamp: 'HernanWilkinson 11/4/2016 09:51'!start	session start! !!PersistentCustomerSystem methodsFor: 'initialization' stamp: 'HernanWilkinson 11/3/2016 08:54'!initialize		super initialize.	self initializeSession. ! !!PersistentCustomerSystem methodsFor: 'initialization' stamp: 'HernanWilkinson 11/4/2016 09:19'!initializeSession	session := DataBaseSession		for: (Array with: self addressMapping with: self customerMapping)! !!PersistentCustomerSystem methodsFor: 'mapping' stamp: 'HernanWilkinson 11/3/2016 08:52'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!PersistentCustomerSystem methodsFor: 'mapping' stamp: 'HernanWilkinson 11/3/2016 08:52'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!PersistentCustomerSystem methodsFor: 'transaction' stamp: 'HernanWilkinson 11/4/2016 09:18'!commit	session commit! !!PersistentCustomerSystem methodsFor: 'transaction' stamp: 'HernanWilkinson 11/4/2016 09:18'!beginTransaction	session beginTransaction! !!PersistentCustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/3/2016 09:11'!customersIsEmpty	^ self allCustomers isEmpty! !!PersistentCustomerSystem methodsFor: 'customers' stamp: 'NicolasPazos 7/1/2018 01:09'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNone: aClosure	| customers |	customers := session		select: [ :aCustomer | 			aCustomer identificationType = anIdentifycationType				and: [ aCustomer identificationNumber = anIdentificationNumber ] ]		ofType: Customer.	customers size = 1		ifFalse: [ ^aClosure value].	^ customers anyOne! !!PersistentCustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:18'!allCustomers	^ session selectAllOfType: Customer! !!PersistentCustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:33'!add: aCustomer	session persist: aCustomer! !Object subclass: #Supplier	instanceVariableNames: 'id name identificationType identificationNumber addresses customers'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Supplier methodsFor: 'addresses' stamp: 'DarioReyes 6/29/2018 21:26'!numberOfAddresses		^addresses size! !!Supplier methodsFor: 'addresses' stamp: 'DarioReyes 6/29/2018 21:25'!addAddress: anAddress 	addresses add: anAddress ! !!Supplier methodsFor: 'addresses' stamp: 'DarioReyes 6/29/2018 21:26'!addressAt: aStreetName ifNone: noneClosure 		^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !!Supplier methodsFor: 'addresses' stamp: 'DarioReyes 6/29/2018 21:26'!addresses	^ addresses! !!Supplier methodsFor: 'addresses' stamp: 'DarioReyes 6/29/2018 21:26'!addressesIsEmpty		^addresses isEmpty! !!Supplier methodsFor: 'initialization' stamp: 'DarioReyes 6/30/2018 03:15'!initialize	addresses := OrderedCollection new.	customers := OrderedCollection new.! !!Supplier methodsFor: 'customers' stamp: 'NicolasPazos 7/1/2018 01:08'!customerIdentifiedAs: anIDType numbered: anIDNumber ifNone: anObject 	^ customers detect: [ :aCustomer | aCustomer isIdentifiedAs: anIDType numbered: anIDNumber ].! !!Supplier methodsFor: 'as yet unclassified' stamp: 'DarioReyes 6/28/2018 20:29'!isIdentifiedAs: anIDType numbered: anIDNumber 	^ identificationNumber = anIDNumber and: [ identificationType = anIDType  ].! !!Supplier methodsFor: 'as yet unclassified' stamp: 'DarioReyes 6/30/2018 03:14'!addCustomer: aCustomer 	customers add: aCustomer! !!Supplier methodsFor: 'accessing' stamp: 'DarioReyes 6/28/2018 20:25'!identificationNumber: anObject	identificationNumber := anObject! !!Supplier methodsFor: 'accessing' stamp: 'DarioReyes 6/28/2018 20:25'!name: anObject	name := anObject! !!Supplier methodsFor: 'accessing' stamp: 'DarioReyes 6/28/2018 20:25'!identificationType	^ identificationType! !!Supplier methodsFor: 'accessing' stamp: 'DarioReyes 6/28/2018 20:25'!name	^ name! !!Supplier methodsFor: 'accessing' stamp: 'DarioReyes 6/28/2018 20:25'!identificationNumber	^ identificationNumber! !!Supplier methodsFor: 'accessing' stamp: 'DarioReyes 6/28/2018 20:25'!identificationType: anObject	identificationType := anObject! !TestCase subclass: #SupplierImportTest	instanceVariableNames: 'importer system'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!SupplierImportTest methodsFor: 'tests' stamp: 'DarioReyes 7/1/2018 13:44'!setUp	"system := TransientSupplierSystem new."	system := Environment current createERPSystem.	system start.	system beginTransaction.	! !!SupplierImportTest methodsFor: 'tests' stamp: 'NicolasPazos 7/1/2018 02:05'!test07CanNotImportNewCustomerRecordIfCustomerExists	| anExistingCustomer anInputStream |		anExistingCustomer := Customer new.	anExistingCustomer firstName: 'Juan'.	anExistingCustomer lastName: 'Perez'.	anExistingCustomer identificationType: 'C'.	anExistingCustomer identificationNumber: '23-25666777-9'.				system addCustomer: anExistingCustomer.	anInputStream := (ReadStream on: 'S,Supplier1,D,123NC,Juan,Perez,C,23-25666777-9').			self 		should: [ self importSuppliersFrom: anInputStream .]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self 				assert: anError messageText 				equals: SupplierImporter newCustomerRecordMatchesAnExistingCustomerInSystemErrorMessage.				]! !!SupplierImportTest methodsFor: 'tests' stamp: 'DarioReyes 7/1/2018 13:31'!test05ExistantCustomersOfSuppliersAreImportedCorrectly	| aSupplier anExistingCustomer |	anExistingCustomer := Customer new.	anExistingCustomer firstName: 'Mario'.	anExistingCustomer lastName: 'Mario'.	anExistingCustomer identificationType: 'D'.	anExistingCustomer identificationNumber: '5456774'.	system addCustomer: anExistingCustomer.	self		importSuppliersFrom:			(ReadStream				on:					'S,Supplier1,D,123EC,D,5456774').	aSupplier := system		supplierIdentifiedAs: 'D'		numbered: '123'		ifNone: [ self fail].	self		assert: aSupplier		hasCustomerNamed: anExistingCustomer firstName		withLastName: anExistingCustomer lastName		identifiedAs: anExistingCustomer identificationType		withNumber: anExistingCustomer identificationNumber		andNumberOfAddresses: anExistingCustomer numberOfAddresses! !!SupplierImportTest methodsFor: 'tests' stamp: 'NicolasPazos 7/1/2018 01:08'!assert: aSupplier hasCustomerNamed: firstName withLastName: lastName identifiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	| customer |	customer := aSupplier		customerIdentifiedAs: idType		numbered: idNumber		ifNone: [  ].	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize! !!SupplierImportTest methodsFor: 'tests' stamp: 'DarioReyes 7/1/2018 13:30'!test03NewCustomersOfSuppliersAreImportedCorrectly	| aSupplier |	self		importSuppliersFrom:			(ReadStream				on:					'S,Supplier1,D,123NC,Juan,Perez,C,23-25666777-9').	aSupplier := system		supplierIdentifiedAs: 'D'		numbered: '123'		ifNone: [ self fail].	self		assert: aSupplier		hasCustomerNamed: 'Juan'		withLastName: 'Perez'		identifiedAs: 'C'		withNumber: '23-25666777-9'		andNumberOfAddresses: 0! !!SupplierImportTest methodsFor: 'tests' stamp: 'NicolasPazos 7/1/2018 02:07'!test09CanNotImportSupplierRecordWithLessThanFourFields	| anInputStream |	anInputStream := (ReadStream on: 'S,Supplier1,D').			self 		should: [ self importSuppliersFrom: anInputStream .]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self 				assert: anError messageText 				equals: SupplierImporter invalidSupplierRecordErrorDescription 				]! !!SupplierImportTest methodsFor: 'tests' stamp: 'NicolasPazos 7/1/2018 02:11'!test10CanNotImportExistingCustomerRecordWithMoreThanThreeFields	| anInputStream |	anInputStream := (ReadStream on: 'S,Supplier1,D,123EC,jorge,luis,borges').			self 		should: [ self importSuppliersFrom: anInputStream .]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self 				assert: anError messageText 				equals: SupplierImporter invalidExistingCustomerRecordErrorDescription 				]! !!SupplierImportTest methodsFor: 'tests' stamp: 'NicolasPazos 7/1/2018 02:12'!test12CanNotImportNewCustomerRecordWithMoreThanFiveFields	| anInputStream |	anInputStream := (ReadStream on: 'S,Supplier1,D,123NC,un,nuevo,customer,con,muchos,campos').			self 		should: [ self importSuppliersFrom: anInputStream .]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self 				assert: anError messageText 				equals: SupplierImporter invalidNewCustomerRecordErrorDescription ]! !!SupplierImportTest methodsFor: 'tests' stamp: 'DarioReyes 7/1/2018 13:32'!test04CustomersCanBeAddedToERPSystem	| aSystemCustomer anExistantCustomer |	anExistantCustomer := Customer new.	anExistantCustomer firstName: 'Mario'.	anExistantCustomer lastName: 'Mario'.	anExistantCustomer identificationType: 'D'.	anExistantCustomer identificationNumber: '5456774'.	system addCustomer: anExistantCustomer.	aSystemCustomer := system		customerIdentifiedAs: 'D'		numbered: '5456774'		ifNone: [ self fail].	self		assert: aSystemCustomer		isNamed: anExistantCustomer firstName		lastName: anExistantCustomer lastName		identifiedAs: anExistantCustomer identificationType		withNumber: anExistantCustomer identificationNumber		andNumberOfAddresses: anExistantCustomer numberOfAddresses! !!SupplierImportTest methodsFor: 'tests' stamp: 'NicolasPazos 7/1/2018 02:14'!test14CanNotImportNewCustomerWithoutSupplier	| anInputStream |	anInputStream := (ReadStream on: 'NC,Juan,Perez,C,23-25666777-9').			self 		should: [ self importSuppliersFrom: anInputStream .]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self 				assert: anError messageText 				equals: SupplierImporter newCustomerWithoutSupplierErrorDescription]! !!SupplierImportTest methodsFor: 'tests' stamp: 'DarioReyes 6/30/2018 04:08'!assert: customer isNamed: firstName lastName: lastName identifiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize.! !!SupplierImportTest methodsFor: 'tests' stamp: 'NicolasPazos 7/1/2018 02:13'!test13CanNotImportNewCustomerRecordWithLessThanFiveFields	| anInputStream |	anInputStream := (ReadStream on: 'S,Supplier1,D,123NC,pocos,campos').			self 		should: [ self importSuppliersFrom: anInputStream .]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self 				assert: anError messageText 				equals: SupplierImporter invalidNewCustomerRecordErrorDescription ]! !!SupplierImportTest methodsFor: 'tests' stamp: 'DarioReyes 6/28/2018 19:41'!tearDown	system commit.	system shutdown! !!SupplierImportTest methodsFor: 'tests' stamp: 'DarioReyes 7/1/2018 13:30'!test01SuppliersAreImportedCorrectly	| aSupplier |	self importSuppliersFrom: (ReadStream on: 'S,Supplier1,D,123').	aSupplier := system		supplierIdentifiedAs: 'D'		numbered: '123'		ifNone: [ self fail.].	self assert: system allSuppliers size equals: 1.	self		assert: aSupplier		isNamed: 'Supplier1'		identifiedAs: 'D'		withNumber: '123'		andNumberOfAddresses: 0! !!SupplierImportTest methodsFor: 'tests' stamp: 'NicolasPazos 7/1/2018 02:14'!test16CanNotImportAddressWithoutSupplier	| anInputStream |	anInputStream := (ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs').			self 		should: [ self importSuppliersFrom: anInputStream .]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self 				assert: anError messageText 				equals: SupplierImporter addressWithoutSupplierErrorDescription]! !!SupplierImportTest methodsFor: 'tests' stamp: 'NicolasPazos 7/1/2018 02:15'!test17ImportFailsWithInvalidRecordType	| anInputStream |	anInputStream := (ReadStream on: 'S,Supplier1,D,123NC,Juan,Perez,C,23-25666777-9Sun,registro,que,no,se,reconoce').			self 		should: [ self importSuppliersFrom: anInputStream .]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self 				assert: anError messageText 				equals: SupplierImporter invalidRecordTypeErrorDescription]! !!SupplierImportTest methodsFor: 'tests' stamp: 'NicolasPazos 7/1/2018 02:14'!test15CanNotImportExistingCustomerWithoutSupplier	| anInputStream |	anInputStream := (ReadStream on: 'EC,D,5456774').			self 		should: [ self importSuppliersFrom: anInputStream .]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self 				assert: anError messageText 				equals: SupplierImporter existentCustomerWithoutSupplierErrorDescription]! !!SupplierImportTest methodsFor: 'tests' stamp: 'DarioReyes 6/28/2018 20:17'!importSuppliersFrom: inputStream	(SupplierImporter from: inputStream using: system) import! !!SupplierImportTest methodsFor: 'tests' stamp: 'NicolasPazos 7/1/2018 02:11'!test11CanNotImportExistingCustomerRecordWithLessThanThreeFields	| anInputStream |	anInputStream := (ReadStream on: 'S,Supplier1,D,123EC,D').			self 		should: [ self importSuppliersFrom: anInputStream .]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self 				assert: anError messageText 				equals: SupplierImporter invalidExistingCustomerRecordErrorDescription 				]! !!SupplierImportTest methodsFor: 'tests' stamp: 'NicolasPazos 7/1/2018 02:05'!test06CanNotImportExistingCustomerRecordIfCustomerDoesNotExist	| anInputStream |	anInputStream :=  (ReadStream on: 'S,Supplier1,D,123EC,D,5456774').	self 		should: [ self importSuppliersFrom: anInputStream .]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self 				assert: anError messageText 				equals: SupplierImporter existentCustomerRecordDoesNotMatchAnyCustomerInSystemErrorMessage.				]	! !!SupplierImportTest methodsFor: 'tests' stamp: 'DarioReyes 7/1/2018 13:30'!test02AddressesOfSuppliersAreImportedCorrectly	| aSupplier |	self		importSuppliersFrom:			(ReadStream				on:					'S,Supplier1,D,123A,San Martin,3322,Olivos,1636,BsAs').	aSupplier := system		supplierIdentifiedAs: 'D'		numbered: '123'		ifNone: [ self fail].	self		assert: aSupplier		hasAddressAt: 'San Martin'		number: 3322		in: 'Olivos'		zipCode: 1636		province: 'BsAs'! !!SupplierImportTest methodsFor: 'tests' stamp: 'NicolasPazos 7/1/2018 02:06'!test08CanNotImportSupplierRecordWithMoreThanFourFields	| anInputStream |	anInputStream := (ReadStream on: 'S,Supplier1,D,123,muchos,campos,mal').			self 		should: [ self importSuppliersFrom: anInputStream .]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self 				assert: anError messageText 				equals: SupplierImporter invalidSupplierRecordErrorDescription 				]! !!SupplierImportTest methodsFor: 'tests' stamp: 'DarioReyes 6/29/2018 21:29'!assert: aSupplier isNamed: aName identifiedAs: anIDType withNumber: anIDNumber andNumberOfAddresses: aNumberOfAddresses	self assert: aSupplier name equals: aName.	self assert: aSupplier identificationType equals: anIDType.	self assert: aSupplier identificationNumber equals: anIDNumber.	self assert: aSupplier numberOfAddresses equals: aNumberOfAddresses.! !!SupplierImportTest methodsFor: 'asserting' stamp: 'NicolasPazos 7/1/2018 00:59'!assert: supplier hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province		| address |	address := supplier addressAt: streetName ifNone: [self fail]. 	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.! !Object subclass: #SupplierImporter	instanceVariableNames: 'line readStream record system newSupplier'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!SupplierImporter methodsFor: 'importing - private - address' stamp: 'DarioReyes 6/28/2018 20:20'!isSupplierRecord	^ record first = 'S'! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'DarioReyes 6/28/2018 20:17'!assertValidAddressRecordSize		record size ~= 6 ifTrue: [ self signalInvalidAddressRecord ].	! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'DarioReyes 6/28/2018 20:17'!isAddressRecord	^ record first = 'A'! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'DarioReyes 6/30/2018 02:59'!importAddress	| newAddress |	self assertThereIsSupplierForAddress.	self assertValidAddressRecordSize.		newAddress := Address new.	newAddress streetName: record second.	newAddress streetNumber: record third asInteger.	newAddress town: record fourth.	newAddress zipCode: record fifth asInteger.	newAddress province: record sixth.		^ newSupplier addAddress: newAddress! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'DarioReyes 6/29/2018 21:20'!assertThereIsSupplierForAddress	newSupplier isNil ifTrue: [ self signalAddressWithoutSuplierError ].	! !!SupplierImporter methodsFor: 'initialization' stamp: 'DarioReyes 6/28/2018 20:17'!initializeOn: aReadStream using: aCustomerSystem	readStream := aReadStream.	system := aCustomerSystem! !!SupplierImporter methodsFor: 'importing - private' stamp: 'DarioReyes 6/28/2018 20:17'!convertLineToRecord	record := line substrings: {$,}.		self assertRecordNotEmpty! !!SupplierImporter methodsFor: 'importing - private' stamp: 'DarioReyes 6/28/2018 20:17'!assertRecordNotEmpty		record isEmpty ifTrue: [ self signalInvalidRecordType ]! !!SupplierImporter methodsFor: 'importing - private' stamp: 'NicolasPazos 7/1/2018 00:50'!importRecord		self isNewCustomerRecord ifTrue: [ ^self importNewCustomer ].	self isExistentCustomerRecord ifTrue: [ ^self importExistentCustomer ].	self isAddressRecord ifTrue: [ ^self importAddress ].	self isSupplierRecord ifTrue: [ ^self importSupplier ].		self signalInvalidRecordType! !!SupplierImporter methodsFor: 'importing - private' stamp: 'DarioReyes 6/28/2018 20:17'!canImportNextLine	line := readStream nextLine.	^ line notNil! !!SupplierImporter methodsFor: 'importing' stamp: 'DarioReyes 6/28/2018 20:17'!import	[ self canImportNextLine ] whileTrue: [ 		self convertLineToRecord.		self importRecord ]! !!SupplierImporter methodsFor: 'error signal' stamp: 'DarioReyes 6/30/2018 03:12'!signalNewCustomerWithoutSuplierError	self error: self class newCustomerWithoutSupplierErrorDescription.! !!SupplierImporter methodsFor: 'error signal' stamp: 'DarioReyes 6/29/2018 21:21'!signalAddressWithoutSuplierError	self error: self class addressWithoutSupplierErrorDescription.! !!SupplierImporter methodsFor: 'error signal' stamp: 'NicolasPazos 7/1/2018 01:48'!signalInvalidNewCustomerRecord 		self error: self class invalidNewCustomerRecordErrorDescription ! !!SupplierImporter methodsFor: 'error signal' stamp: 'NicolasPazos 7/1/2018 01:11'!signalNotExistingCustomer	^ self		error:			self class				existentCustomerRecordDoesNotMatchAnyCustomerInSystemErrorMessage! !!SupplierImporter methodsFor: 'error signal' stamp: 'NicolasPazos 7/1/2018 01:39'!signalInvalidSupplierRecord	self error: self class invalidSupplierRecordErrorDescription.! !!SupplierImporter methodsFor: 'error signal' stamp: 'NicolasPazos 7/1/2018 01:44'!signalInvalidExistentCustomerRecord	self error: self class invalidExistingCustomerRecordErrorDescription.! !!SupplierImporter methodsFor: 'error signal' stamp: 'DarioReyes 6/28/2018 20:17'!signalInvalidAddressRecord 		self error: self class invalidAddressRecordErrorDescription ! !!SupplierImporter methodsFor: 'error signal' stamp: 'DarioReyes 6/28/2018 20:17'!signalInvalidRecordType	self error: self class invalidRecordTypeErrorDescription! !!SupplierImporter methodsFor: 'error signal' stamp: 'NicolasPazos 7/1/2018 01:55'!signalExistentCustomerWithoutSuplierError	self error: self class existentCustomerWithoutSupplierErrorDescription.! !!SupplierImporter methodsFor: 'importing - private - supplier' stamp: 'DarioReyes 6/28/2018 20:23'!assertValidSupplierRecordSize	record size ~= 4 ifTrue: [ self signalInvalidSupplierRecord ].! !!SupplierImporter methodsFor: 'importing - private - supplier' stamp: 'DarioReyes 6/30/2018 03:57'!importSupplier	self assertValidSupplierRecordSize.	newSupplier := Supplier new.	newSupplier name: record second.	newSupplier identificationType: record third.	newSupplier identificationNumber: record fourth.	system addSupplier: newSupplier.! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'DarioReyes 6/30/2018 03:14'!isNewCustomerRecord	^ record first = 'NC'! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'NicolasPazos 7/1/2018 00:51'!assertThereIsSupplierForExistentCustomer	newSupplier isNil ifTrue: [ self signalExistentCustomerWithoutSuplierError ].	! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'DarioReyes 6/30/2018 03:11'!assertThereIsSupplierForNewCustomer	newSupplier isNil ifTrue: [ self signalNewCustomerWithoutSuplierError ].	! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'NicolasPazos 7/1/2018 01:28'!signalNewCustomerExists	self		error:			self class				newCustomerRecordMatchesAnExistingCustomerInSystemErrorMessage! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'NicolasPazos 7/1/2018 01:11'!importExistentCustomer	| customer |	self assertThereIsSupplierForExistentCustomer.	self assertValidExistentCustomerRecordSize.	customer := system		customerIdentifiedAs: record second		numbered: record third		ifNone:			[ self signalNotExistingCustomer ].	newSupplier addCustomer: customer! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'DarioReyes 7/1/2018 14:00'!assertDoesNotExistCustomerIdentifiedAs: identificationType numbered: identificationNumber	system		customerIdentifiedAs: identificationType		numbered: identificationNumber		ifNone: [ ^ true ].	self signalNewCustomerExists.! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'NicolasPazos 7/1/2018 01:44'!assertValidExistentCustomerRecordSize	record size ~= 3 ifTrue: [ self signalInvalidExistentCustomerRecord ]! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'NicolasPazos 7/1/2018 00:50'!isExistentCustomerRecord	^ record first = 'EC'! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'NicolasPazos 7/1/2018 01:48'!assertValidNewCustomerRecordSize		record size ~= 5 ifTrue: [ self signalInvalidNewCustomerRecord ].	! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'NicolasPazos 7/1/2018 01:47'!importNewCustomer	| customer |	self assertThereIsSupplierForNewCustomer.	self assertValidNewCustomerRecordSize.	customer := Customer new.	customer firstName: record second.	customer lastName: record third.	customer identificationType: record fourth.	customer identificationNumber: record fifth.	self 		assertDoesNotExistCustomerIdentifiedAs: customer identificationType 		numbered: customer identificationNumber .	newSupplier addCustomer: customer.	system addCustomer: customer! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SupplierImporter class	instanceVariableNames: ''!!SupplierImporter class methodsFor: 'error descriptions' stamp: 'DarioReyes 6/28/2018 20:17'!invalidRecordTypeErrorDescription		^'Invalid record type'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'DarioReyes 6/30/2018 03:12'!newCustomerWithoutSupplierErrorDescription		^'There is no supplier for the imported new customer'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'NicolasPazos 7/1/2018 01:55'!existentCustomerWithoutSupplierErrorDescription		^'There is no supplier for the imported existant customer'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'DarioReyes 6/29/2018 21:21'!addressWithoutSupplierErrorDescription		^'There is no supplier for the imported address'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'DarioReyes 6/28/2018 20:17'!invalidAddressRecordErrorDescription		^'Invalid address record'! !!SupplierImporter class methodsFor: 'instance creation' stamp: 'DarioReyes 6/28/2018 20:17'!from: aReadStream using: aCustomerSystem	^ self new initializeOn: aReadStream using: aCustomerSystem! !!SupplierImporter class methodsFor: 'error messages' stamp: 'NicolasPazos 7/1/2018 01:46'!invalidNewCustomerRecordErrorDescription	^'Record de New Customer inválido'! !!SupplierImporter class methodsFor: 'error messages' stamp: 'NicolasPazos 7/1/2018 01:12'!existentCustomerRecordDoesNotMatchAnyCustomerInSystemErrorMessage	^'Un supuesto cliente existente no está en el sistema'! !!SupplierImporter class methodsFor: 'error messages' stamp: 'NicolasPazos 7/1/2018 01:16'!newCustomerRecordMatchesAnExistingCustomerInSystemErrorMessage	^'Los clientes nuevos no deberían estar en el sistema.'! !!SupplierImporter class methodsFor: 'error messages' stamp: 'NicolasPazos 7/1/2018 01:40'!invalidSupplierRecordErrorDescription	^'Record de Supplier inválido'! !!SupplierImporter class methodsFor: 'error messages' stamp: 'NicolasPazos 7/1/2018 01:43'!invalidExistingCustomerRecordErrorDescription	^'Record de Existing Customer inválido'! !Object subclass: #SupplierSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!SupplierSystem methodsFor: 'transaction' stamp: 'DarioReyes 6/28/2018 20:10'!commit	self subclassResponsibility! !!SupplierSystem methodsFor: 'transaction' stamp: 'DarioReyes 6/28/2018 20:10'!beginTransaction	self subclassResponsibility! !!SupplierSystem methodsFor: 'system live cycle' stamp: 'DarioReyes 6/28/2018 20:10'!shutdown	self subclassResponsibility! !!SupplierSystem methodsFor: 'system live cycle' stamp: 'DarioReyes 6/28/2018 20:10'!start	self subclassResponsibility! !!SupplierSystem methodsFor: 'suppliers' stamp: 'DarioReyes 7/1/2018 14:05'!add: aSupplier	self subclassResponsibility! !!SupplierSystem methodsFor: 'suppliers' stamp: 'DarioReyes 7/1/2018 14:05'!supplierIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNone: aClosure	self subclassResponsibility! !!SupplierSystem methodsFor: 'suppliers' stamp: 'DarioReyes 7/1/2018 14:05'!suppliersIsEmpty	self subclassResponsibility! !!SupplierSystem methodsFor: 'suppliers' stamp: 'DarioReyes 7/1/2018 14:05'!allSuppliers	self subclassResponsibility! !SupplierSystem subclass: #PersistantSupplierSystem	instanceVariableNames: 'session'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!PersistantSupplierSystem methodsFor: 'initialization' stamp: 'DarioReyes 7/1/2018 13:52'!initialize	self initializeSession.! !!PersistantSupplierSystem methodsFor: 'initialization' stamp: 'DarioReyes 7/1/2018 13:53'!initializeSession	session := DataBaseSession		for: (Array with: self addressMapping with: self customerMapping with: self supplierMapping)! !!PersistantSupplierSystem methodsFor: 'suppliers' stamp: 'DarioReyes 7/1/2018 13:50'!allSuppliers	^ session selectAllOfType: Supplier! !!PersistantSupplierSystem methodsFor: 'suppliers' stamp: 'DarioReyes 7/1/2018 13:51'!suppliersIsEmpty	^ self allSuppliers isEmpty! !!PersistantSupplierSystem methodsFor: 'suppliers' stamp: 'DarioReyes 7/1/2018 13:51'!supplierIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNone: aClosure	| suppliers |	suppliers := session		select: [ :aSupplier | 			aSupplier identificationType = anIdentifycationType				and: [ aSupplier identificationNumber = anIdentificationNumber ] ]		ofType: Supplier.	suppliers size = 1		ifFalse: [ ^aClosure value].	^ suppliers anyOne! !!PersistantSupplierSystem methodsFor: 'suppliers' stamp: 'DarioReyes 7/1/2018 13:49'!add: aSupplier	session persist: aSupplier! !!PersistantSupplierSystem methodsFor: 'system live cycle' stamp: 'DarioReyes 7/1/2018 13:50'!shutdown	session shutdown! !!PersistantSupplierSystem methodsFor: 'system live cycle' stamp: 'DarioReyes 7/1/2018 13:50'!start	session start! !!PersistantSupplierSystem methodsFor: 'transaction' stamp: 'DarioReyes 7/1/2018 13:50'!beginTransaction	session beginTransaction ! !!PersistantSupplierSystem methodsFor: 'transaction' stamp: 'DarioReyes 7/1/2018 13:50'!commit	session commit! !!PersistantSupplierSystem methodsFor: 'mapping' stamp: 'DarioReyes 7/1/2018 13:55'!supplierMapping	^ ClassMapping		withDefaultTableNameFor: Supplier		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #name)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address)				with: (OneToManyMapping withDefaultFieldNameFor: #customers ofType: Customer))! !!PersistantSupplierSystem methodsFor: 'mapping' stamp: 'DarioReyes 7/1/2018 13:53'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!PersistantSupplierSystem methodsFor: 'mapping' stamp: 'DarioReyes 7/1/2018 13:53'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !CustomerSystem subclass: #TransientCustomerSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!TransientCustomerSystem methodsFor: 'transaction' stamp: 'HernanWilkinson 11/4/2016 09:39'!commit		! !!TransientCustomerSystem methodsFor: 'transaction' stamp: 'HernanWilkinson 11/4/2016 09:39'!beginTransaction		! !!TransientCustomerSystem methodsFor: 'initialization' stamp: 'HernanWilkinson 11/4/2016 09:41'!initialize		customers := OrderedCollection new! !!TransientCustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:40'!customersIsEmpty	^ customers isEmpty ! !!TransientCustomerSystem methodsFor: 'customers' stamp: 'NicolasPazos 7/1/2018 01:10'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNone: aClosure		^customers detect: [ :aCustomer | aCustomer isIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ] ifNone: aClosure.! !!TransientCustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:39'!allCustomers	^ customers copy! !!TransientCustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:39'!add: aCustomer	customers add: aCustomer! !!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'NicolasPazos 7/1/2018 01:26'!hasCustomerIdentifiedAs: anIDType numbered: anIDNumber 	customers 		detect: [ :aCustomer | aCustomer isIdentifiedAs: anIDType numbered: anIDNumber  ] 		ifFound: [ ^true ]		ifNone: [ ^false ]! !!TransientCustomerSystem methodsFor: 'system live cycle' stamp: 'HernanWilkinson 11/4/2016 09:52'!shutdown		! !!TransientCustomerSystem methodsFor: 'system live cycle' stamp: 'HernanWilkinson 11/4/2016 09:51'!start	! !ERPSystem subclass: #TransientERPSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!TransientERPSystem methodsFor: 'initialization' stamp: 'DarioReyes 7/1/2018 13:37'!initialize	customerSubsystem := TransientCustomerSystem new.	supplierSubsystem := TransientSupplierSystem new.! !SupplierSystem subclass: #TransientSupplierSystem	instanceVariableNames: 'suppliers'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!TransientSupplierSystem methodsFor: 'transaction' stamp: 'DarioReyes 6/28/2018 20:11'!commit		! !!TransientSupplierSystem methodsFor: 'transaction' stamp: 'DarioReyes 6/28/2018 20:11'!beginTransaction		! !!TransientSupplierSystem methodsFor: 'suppliers' stamp: 'DarioReyes 6/28/2018 20:12'!allSuppliers	^ suppliers copy! !!TransientSupplierSystem methodsFor: 'suppliers' stamp: 'DarioReyes 6/28/2018 20:13'!suppliersIsEmpty	^ suppliers isEmpty ! !!TransientSupplierSystem methodsFor: 'suppliers' stamp: 'NicolasPazos 7/1/2018 02:00'!supplierIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNone: aClosure		^suppliers detect: [ :aSupplier | aSupplier isIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ] ifNone: aClosure.! !!TransientSupplierSystem methodsFor: 'suppliers' stamp: 'DarioReyes 7/1/2018 13:48'!add: aSupplier	suppliers add: aSupplier! !!TransientSupplierSystem methodsFor: 'system live cycle' stamp: 'DarioReyes 6/28/2018 20:11'!shutdown		! !!TransientSupplierSystem methodsFor: 'system live cycle' stamp: 'DarioReyes 6/28/2018 20:11'!start	! !!TransientSupplierSystem methodsFor: 'initialization' stamp: 'DarioReyes 6/28/2018 20:12'!initialize		suppliers := OrderedCollection new! !