Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:08'!province: aProvince 	province := aProvince	! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:07'!town: aTown 	town := aTown! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !!Address methodsFor: 'initialization' stamp: 'DaroReyes 6/20/2018 01:15'!initializeOnStreet: aStreetName atNumber: aStreetNumber in: aTown withZipcode: aZipCode in: aProvince	streetName := aStreetName.	streetNumber := aStreetNumber.	town := aTown.	zipCode := aZipCode.	province := aProvince.! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetNumber: aStreetNumber 	streetNumber := aStreetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetName: aStreetName 	streetName := aStreetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:08'!zipCode: aZipCode 	zipCode := aZipCode! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Address class	instanceVariableNames: ''!!Address class methodsFor: 'as yet unclassified' stamp: 'DaroReyes 6/20/2018 01:18'!onStreet: aStreetName atNumber: aStreetNumber in: aTown withZipcode: aZipCode in: aProvince	^self new initializeOnStreet: aStreetName atNumber: aStreetNumber in: aTown withZipcode: aZipCode in: aProvince! !Object subclass: #Customer	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:27'!addAddress: anAddress 	addresses add: anAddress ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:25'!addresses	^ addresses! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationType		^identificationType ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationNumber		^identificationNumber ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !!Customer methodsFor: 'initialization' stamp: 'HernanWilkinson 10/28/2016 13:26'!initialize	super initialize.	addresses := OrderedCollection new.! !!Customer methodsFor: 'initialization' stamp: 'DaroReyes 6/20/2018 01:02'!initializeWithFirstName: aFirstName andLastName: aLastName identifiedBy: anIdentificationNumber ofType: anIdentificationType registering: someAddresses	super initialize.	firstName := aFirstName. 	lastName := aLastName.	identificationNumber := anIdentificationNumber.	identificationType := anIdentificationType.	addresses := someAddresses.! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!lastName: aLastName 	lastName := aLastName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!firstName: aName 	firstName := aName! !!Customer methodsFor: 'tests' stamp: 'Anonymous 6/20/2018 23:33'!addressesQuantity	^ self addresses size! !!Customer methodsFor: 'tests' stamp: 'Anonymous 6/20/2018 23:48'!addressesDetect: aBlockClosure	^ self addresses detect: aBlockClosure! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Customer class	instanceVariableNames: 'test'!!Customer class methodsFor: 'importing' stamp: 'Anonymous 6/20/2018 21:34'!importCustomers	"	self importCustomers	"	| anObject |	anObject := FileStream fileNamed: 'input.txt'.	test importCustomers! !!Customer class methodsFor: 'importing' stamp: 'DaroReyes 6/20/2018 01:18'!withFirstName: aFirstName andLastName: aLastName identifiedBy: anIdentificationNumber ofType: anIdentificationType registering: someAddresses	^self new initializeWithFirstName: aFirstName andLastName: aLastName identifiedBy: anIdentificationNumber ofType: anIdentificationType registering: someAddresses! !Object subclass: #CustomerImporter	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImporter methodsFor: 'importing' stamp: 'Anonymous 6/20/2018 21:51'!importCustomersFrom: inputStream to: aDataBaseSession	| newCustomer line |	line := inputStream nextLine.	[ line notNil ]		whileTrue: [ (line beginsWith: 'C')				ifTrue: [ | customerData |					customerData := line substrings: {$,}.					newCustomer := Customer new.					newCustomer firstName: customerData second.					newCustomer lastName: customerData third.					newCustomer identificationType: customerData fourth.					newCustomer identificationNumber: customerData fifth.					aDataBaseSession persist: newCustomer ].			(line beginsWith: 'A')				ifTrue: [ | addressData newAddress |					addressData := line substrings: {$,}.					newAddress := Address new.					newAddress streetName: addressData second.					newAddress streetNumber: addressData third asInteger.					newAddress town: addressData fourth.					newAddress zipCode: addressData fifth asInteger.					newAddress province: addressData sixth.					newCustomer addAddress: newAddress ].			line := inputStream nextLine ].! !TestCase subclass: #CustomerImporterTests	instanceVariableNames: 'session customerImporter inputStream'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImporterTests methodsFor: 'tests' stamp: 'Anonymous 6/21/2018 01:04'!test03CustomersAddressesAreImportedCorrectly	| sanMartinAddress maipuAddress alemAddress allCustomers customerPepe customerJuan |		customerImporter		importCustomersFrom: inputStream 		to: session.			allCustomers := session selectAllOfType: Customer.		customerPepe := self detectCustomerWithFirstName: 'Pepe' in: allCustomers.	customerJuan := self detectCustomerWithFirstName: 'Juan' in: allCustomers.		sanMartinAddress := self detectAddressInStreet: 'San Martin' of: customerPepe.	maipuAddress := self detectAddressInStreet: 'Maipu' of: customerPepe.	alemAddress := self detectAddressInStreet: 'Alem' of: customerJuan.	self assert: customerPepe addressesQuantity equals: 2.	self assert: customerJuan addressesQuantity equals: 1.	self assertThatIsTheKnownSanMartinAddress: sanMartinAddress.	self assertThatIsTheKnownMaipuAddress: maipuAddress.	self assertThatIsTheKnownAlemAddress: alemAddress! !!CustomerImporterTests methodsFor: 'tests' stamp: 'Anonymous 6/21/2018 01:03'!test01CustomersAloneAreImportedCorrectly	| allCustomers customerPepe customerJuan |		customerImporter		importCustomersFrom: inputStream 		to: session.			allCustomers := session selectAllOfType: Customer.	customerPepe := self detectCustomerWithFirstName: 'Pepe' in: allCustomers.	customerJuan := self detectCustomerWithFirstName: 'Juan' in: allCustomers.	self assert: allCustomers size equals: 2.	self		assert: customerPepe		lastNameIs: 'Sanchez'		IDTypeIs: 'D'		IDNumerIs: '22333444'.	self		assert: customerJuan		lastNameIs:'Perez'  		IDTypeIs: 'C'  		IDNumerIs: '23-25666777-9'.! !!CustomerImporterTests methodsFor: 'tests' stamp: 'Anonymous 6/21/2018 01:04'!test02AddressesAloneAreImportedCorrectly	| sanMartinAddress maipuAddress alemAddress allAddresses |		customerImporter		importCustomersFrom: inputStream 		to: session.			allAddresses := session selectAllOfType: Address.	sanMartinAddress := self detectAddressInStreet: 'San Martin' in: allAddresses.	maipuAddress := self detectAddressInStreet: 'Maipu' in: allAddresses.	alemAddress := self detectAddressInStreet: 'Alem' in: allAddresses.		self assert: allAddresses size equals: 3.	self assertThatIsTheKnownSanMartinAddress: sanMartinAddress.	self assertThatIsTheKnownMaipuAddress: maipuAddress.	self assertThatIsTheKnownAlemAddress: alemAddress! !!CustomerImporterTests methodsFor: 'asserting' stamp: 'Anonymous 6/21/2018 00:23'!assert: anAddress streetNumberIs: aStreetNumber townIs: aTown zipCodeIs: aZipCode provinceIs: aProvince	self assert: anAddress streetNumber equals: aStreetNumber.	self assert: anAddress town equals: aTown.	self assert: anAddress zipCode equals: aZipCode.	self assert: anAddress province equals: aProvince! !!CustomerImporterTests methodsFor: 'asserting' stamp: 'DaroReyes 6/20/2018 12:22'!assertsElementsPersistedIn: aSession ofType: aClass areExactly: aCollectionOfObjects	self assert: (aSession selectAllOfType: aClass) size equals: aCollectionOfObjects size.		aCollectionOfObjects do: [ :anObject | 		self assert: aSession persistsOnce: anObject ofType: aClass.	].! !!CustomerImporterTests methodsFor: 'asserting' stamp: 'Anonymous 6/21/2018 00:44'!assert: customerPepe lastNameIs: aLastName IDTypeIs: anIDType IDNumerIs: anIDNumber	self assert: customerPepe lastName equals: aLastName.	self assert: customerPepe identificationType equals: anIDType.	self assert: customerPepe identificationNumber equals: anIDNumber.! !!CustomerImporterTests methodsFor: 'asserting' stamp: 'DaroReyes 6/20/2018 11:43'!assert: aSession persistsOnce: anObject ofType: aClass	self assert: (aSession select: [ :aPersistedObject | anObject = aPersistedObject ] ofType: aClass) size equals: 1.! !!CustomerImporterTests methodsFor: 'test factory' stamp: 'Anonymous 6/21/2018 01:08'!pepeAndJuanStreamInput	| data |		data := 'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'.	^ReadStream on: data.! !!CustomerImporterTests methodsFor: 'running' stamp: 'Anonymous 6/21/2018 01:08'!setUp	customerImporter := CustomerImporter new.	inputStream := self pepeAndJuanStreamInput.	session := DataBaseSession		for:			(Array				with:					(ClassMapping						withDefaultTableNameFor: Address						mappingAll:							(Array								with: (EmbededMapping withDefaultFieldNameFor: #streetName)								with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)								with: (EmbededMapping withDefaultFieldNameFor: #town)								with: (EmbededMapping withDefaultFieldNameFor: #zipCode)								with: (EmbededMapping withDefaultFieldNameFor: #province)))				with:					(ClassMapping						withDefaultTableNameFor: Customer						mappingAll:							(Array								with: (EmbededMapping withDefaultFieldNameFor: #firstName)								with: (EmbededMapping withDefaultFieldNameFor: #lastName)								with: (EmbededMapping withDefaultFieldNameFor: #identificationType)								with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)								with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address)))).	session open.	session beginTransaction! !!CustomerImporterTests methodsFor: 'running' stamp: 'DaroReyes 6/19/2018 20:13'!tearDown	session commit.	session close! !!CustomerImporterTests methodsFor: 'factory asserting' stamp: 'Anonymous 6/21/2018 01:05'!assertThatIsTheKnownSanMartinAddress: sanMartinAddress	self		assert: sanMartinAddress		streetNumberIs: 3322		townIs: 'Olivos'		zipCodeIs: 1636		provinceIs: 'BsAs'! !!CustomerImporterTests methodsFor: 'factory asserting' stamp: 'Anonymous 6/21/2018 01:05'!assertThatIsTheKnownMaipuAddress: maipuAddress	self		assert: maipuAddress		streetNumberIs: 888		townIs: 'Florida'		zipCodeIs: 1122		provinceIs: 'Buenos Aires'! !!CustomerImporterTests methodsFor: 'factory asserting' stamp: 'Anonymous 6/21/2018 01:09'!assertThatIsTheKnownAlemAddress: alemAddress	self		assert: alemAddress		streetNumberIs: 1122		townIs: 'CABA'		zipCodeIs: 1001		provinceIs: 'CABA'! !!CustomerImporterTests methodsFor: 'testing - auxiliary' stamp: 'Anonymous 6/20/2018 23:51'!detectAddressInStreet: aStreetName of: customerPepe	^customerPepe addressesDetect: [ :anAddress | anAddress streetName = aStreetName ]! !!CustomerImporterTests methodsFor: 'testing - auxiliary' stamp: 'Anonymous 6/20/2018 23:38'!detectCustomerWithFirstName: aFirstName in: aCollectionOfCustomers	^aCollectionOfCustomers detect: [ :aCustomer | aCustomer firstName = aFirstName].! !!CustomerImporterTests methodsFor: 'testing - auxiliary' stamp: 'Anonymous 6/21/2018 00:53'!detectAddressInStreet: aStreetName in: aCollectionOfAddresses	^aCollectionOfAddresses detect: [ :anAddress | anAddress streetName = aStreetName].! !